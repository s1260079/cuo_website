{"ast":null,"code":"\"use strict\";\n\nfunction _typeof(obj) { \"@babel/helpers - typeof\"; if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function\"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }\n\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) { return call; } return _assertThisInitialized(self); }\n\nfunction _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return self; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nfunction _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nvar events_1 = require(\"events\");\n\nvar debug_1 = __importDefault(require(\"debug\"));\n\nvar promisify_1 = __importDefault(require(\"./promisify\"));\n\nvar debug = debug_1[\"default\"]('agent-base');\n\nfunction isAgent(v) {\n  return Boolean(v) && typeof v.addRequest === 'function';\n}\n\nfunction isSecureEndpoint() {\n  var _Error = new Error(),\n      stack = _Error.stack;\n\n  if (typeof stack !== 'string') return false;\n  return stack.split('\\n').some(function (l) {\n    return l.indexOf('(https.js:') !== -1 || l.indexOf('node:https:') !== -1;\n  });\n}\n\nfunction createAgent(callback, opts) {\n  return new createAgent.Agent(callback, opts);\n}\n\n(function (createAgent) {\n  /**\n   * Base `http.Agent` implementation.\n   * No pooling/keep-alive is implemented by default.\n   *\n   * @param {Function} callback\n   * @api public\n   */\n  var Agent = /*#__PURE__*/function (_events_1$EventEmitte) {\n    _inherits(Agent, _events_1$EventEmitte);\n\n    var _super = _createSuper(Agent);\n\n    function Agent(callback, _opts) {\n      var _this;\n\n      _classCallCheck(this, Agent);\n\n      _this = _super.call(this);\n      var opts = _opts;\n\n      if (typeof callback === 'function') {\n        _this.callback = callback;\n      } else if (callback) {\n        opts = callback;\n      } // Timeout for the socket to be returned from the callback\n\n\n      _this.timeout = null;\n\n      if (opts && typeof opts.timeout === 'number') {\n        _this.timeout = opts.timeout;\n      } // These aren't actually used by `agent-base`, but are required\n      // for the TypeScript definition files in `@types/node` :/\n\n\n      _this.maxFreeSockets = 1;\n      _this.maxSockets = 1;\n      _this.maxTotalSockets = Infinity;\n      _this.sockets = {};\n      _this.freeSockets = {};\n      _this.requests = {};\n      _this.options = {};\n      return _this;\n    }\n\n    _createClass(Agent, [{\n      key: \"defaultPort\",\n      get: function get() {\n        if (typeof this.explicitDefaultPort === 'number') {\n          return this.explicitDefaultPort;\n        }\n\n        return isSecureEndpoint() ? 443 : 80;\n      },\n      set: function set(v) {\n        this.explicitDefaultPort = v;\n      }\n    }, {\n      key: \"protocol\",\n      get: function get() {\n        if (typeof this.explicitProtocol === 'string') {\n          return this.explicitProtocol;\n        }\n\n        return isSecureEndpoint() ? 'https:' : 'http:';\n      },\n      set: function set(v) {\n        this.explicitProtocol = v;\n      }\n    }, {\n      key: \"callback\",\n      value: function callback(req, opts, fn) {\n        throw new Error('\"agent-base\" has no default implementation, you must subclass and override `callback()`');\n      }\n      /**\n       * Called by node-core's \"_http_client.js\" module when creating\n       * a new HTTP request with this Agent instance.\n       *\n       * @api public\n       */\n\n    }, {\n      key: \"addRequest\",\n      value: function addRequest(req, _opts) {\n        var _this2 = this;\n\n        var opts = Object.assign({}, _opts);\n\n        if (typeof opts.secureEndpoint !== 'boolean') {\n          opts.secureEndpoint = isSecureEndpoint();\n        }\n\n        if (opts.host == null) {\n          opts.host = 'localhost';\n        }\n\n        if (opts.port == null) {\n          opts.port = opts.secureEndpoint ? 443 : 80;\n        }\n\n        if (opts.protocol == null) {\n          opts.protocol = opts.secureEndpoint ? 'https:' : 'http:';\n        }\n\n        if (opts.host && opts.path) {\n          // If both a `host` and `path` are specified then it's most\n          // likely the result of a `url.parse()` call... we need to\n          // remove the `path` portion so that `net.connect()` doesn't\n          // attempt to open that as a unix socket file.\n          delete opts.path;\n        }\n\n        delete opts.agent;\n        delete opts.hostname;\n        delete opts._defaultAgent;\n        delete opts.defaultPort;\n        delete opts.createConnection; // Hint to use \"Connection: close\"\n        // XXX: non-documented `http` module API :(\n\n        req._last = true;\n        req.shouldKeepAlive = false;\n        var timedOut = false;\n        var timeoutId = null;\n        var timeoutMs = opts.timeout || this.timeout;\n\n        var onerror = function onerror(err) {\n          if (req._hadError) return;\n          req.emit('error', err); // For Safety. Some additional errors might fire later on\n          // and we need to make sure we don't double-fire the error event.\n\n          req._hadError = true;\n        };\n\n        var ontimeout = function ontimeout() {\n          timeoutId = null;\n          timedOut = true;\n          var err = new Error(\"A \\\"socket\\\" was not created for HTTP request before \".concat(timeoutMs, \"ms\"));\n          err.code = 'ETIMEOUT';\n          onerror(err);\n        };\n\n        var callbackError = function callbackError(err) {\n          if (timedOut) return;\n\n          if (timeoutId !== null) {\n            clearTimeout(timeoutId);\n            timeoutId = null;\n          }\n\n          onerror(err);\n        };\n\n        var onsocket = function onsocket(socket) {\n          if (timedOut) return;\n\n          if (timeoutId != null) {\n            clearTimeout(timeoutId);\n            timeoutId = null;\n          }\n\n          if (isAgent(socket)) {\n            // `socket` is actually an `http.Agent` instance, so\n            // relinquish responsibility for this `req` to the Agent\n            // from here on\n            debug('Callback returned another Agent instance %o', socket.constructor.name);\n            socket.addRequest(req, opts);\n            return;\n          }\n\n          if (socket) {\n            socket.once('free', function () {\n              _this2.freeSocket(socket, opts);\n            });\n            req.onSocket(socket);\n            return;\n          }\n\n          var err = new Error(\"no Duplex stream was returned to agent-base for `\".concat(req.method, \" \").concat(req.path, \"`\"));\n          onerror(err);\n        };\n\n        if (typeof this.callback !== 'function') {\n          onerror(new Error('`callback` is not defined'));\n          return;\n        }\n\n        if (!this.promisifiedCallback) {\n          if (this.callback.length >= 3) {\n            debug('Converting legacy callback function to promise');\n            this.promisifiedCallback = promisify_1[\"default\"](this.callback);\n          } else {\n            this.promisifiedCallback = this.callback;\n          }\n        }\n\n        if (typeof timeoutMs === 'number' && timeoutMs > 0) {\n          timeoutId = setTimeout(ontimeout, timeoutMs);\n        }\n\n        if ('port' in opts && typeof opts.port !== 'number') {\n          opts.port = Number(opts.port);\n        }\n\n        try {\n          debug('Resolving socket for %o request: %o', opts.protocol, \"\".concat(req.method, \" \").concat(req.path));\n          Promise.resolve(this.promisifiedCallback(req, opts)).then(onsocket, callbackError);\n        } catch (err) {\n          Promise.reject(err)[\"catch\"](callbackError);\n        }\n      }\n    }, {\n      key: \"freeSocket\",\n      value: function freeSocket(socket, opts) {\n        debug('Freeing socket %o %o', socket.constructor.name, opts);\n        socket.destroy();\n      }\n    }, {\n      key: \"destroy\",\n      value: function destroy() {\n        debug('Destroying agent %o', this.constructor.name);\n      }\n    }]);\n\n    return Agent;\n  }(events_1.EventEmitter);\n\n  createAgent.Agent = Agent; // So that `instanceof` works correctly\n\n  createAgent.prototype = createAgent.Agent.prototype;\n})(createAgent || (createAgent = {}));\n\nmodule.exports = createAgent;","map":null,"metadata":{},"sourceType":"module"}