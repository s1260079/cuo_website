{"ast":null,"code":"\"use strict\";\n/**\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nfunction _typeof(obj) { \"@babel/helpers - typeof\"; if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function\"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }\n\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) { return call; } return _assertThisInitialized(self); }\n\nfunction _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return self; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nfunction _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.StreamProxy = exports.StreamType = void 0; // eslint-disable-next-line @typescript-eslint/no-var-requires\n\nvar duplexify = require('duplexify'); // eslint-disable-next-line @typescript-eslint/no-var-requires\n\n\nvar retryRequest = require('retry-request');\n/**\n * The type of gRPC streaming.\n * @enum {number}\n */\n\n\nvar StreamType;\n\n(function (StreamType) {\n  /** Client sends a single request, server streams responses. */\n  StreamType[StreamType[\"SERVER_STREAMING\"] = 1] = \"SERVER_STREAMING\";\n  /** Client streams requests, server returns a single response. */\n\n  StreamType[StreamType[\"CLIENT_STREAMING\"] = 2] = \"CLIENT_STREAMING\";\n  /** Both client and server stream objects. */\n\n  StreamType[StreamType[\"BIDI_STREAMING\"] = 3] = \"BIDI_STREAMING\";\n})(StreamType = exports.StreamType || (exports.StreamType = {}));\n\nvar StreamProxy = /*#__PURE__*/function (_duplexify) {\n  _inherits(StreamProxy, _duplexify);\n\n  var _super = _createSuper(StreamProxy);\n\n  /**\n   * StreamProxy is a proxy to gRPC-streaming method.\n   *\n   * @private\n   * @constructor\n   * @param {StreamType} type - the type of gRPC stream.\n   * @param {ApiCallback} callback - the callback for further API call.\n   */\n  function StreamProxy(type, callback) {\n    var _this;\n\n    _classCallCheck(this, StreamProxy);\n\n    _this = _super.call(this, undefined, undefined, {\n      objectMode: true,\n      readable: type !== StreamType.CLIENT_STREAMING,\n      writable: type !== StreamType.SERVER_STREAMING\n    });\n    _this.type = type;\n    _this._callback = callback;\n    _this._isCancelCalled = false;\n    return _this;\n  }\n\n  _createClass(StreamProxy, [{\n    key: \"cancel\",\n    value: function cancel() {\n      if (this.stream) {\n        this.stream.cancel();\n      } else {\n        this._isCancelCalled = true;\n      }\n    }\n    /**\n     * Forward events from an API request stream to the user's stream.\n     * @param {Stream} stream - The API request stream.\n     */\n\n  }, {\n    key: \"forwardEvents\",\n    value: function forwardEvents(stream) {\n      var _this2 = this;\n\n      var eventsToForward = ['metadata', 'response', 'status'];\n      eventsToForward.forEach(function (event) {\n        stream.on(event, _this2.emit.bind(_this2, event));\n      }); // We also want to supply the status data as 'response' event to support\n      // the behavior of google-cloud-node expects.\n      // see:\n      // https://github.com/GoogleCloudPlatform/google-cloud-node/pull/1775#issuecomment-259141029\n      // https://github.com/GoogleCloudPlatform/google-cloud-node/blob/116436fa789d8b0f7fc5100b19b424e3ec63e6bf/packages/common/src/grpc-service.js#L355\n\n      stream.on('metadata', function (metadata) {\n        // Create a response object with succeeds.\n        // TODO: unify this logic with the decoration of gRPC response when it's\n        // added. see: https://github.com/googleapis/gax-nodejs/issues/65\n        stream.emit('response', {\n          code: 200,\n          details: '',\n          message: 'OK',\n          metadata: metadata\n        });\n      });\n    }\n    /**\n     * Specifies the target stream.\n     * @param {ApiCall} apiCall - the API function to be called.\n     * @param {Object} argument - the argument to be passed to the apiCall.\n     */\n\n  }, {\n    key: \"setStream\",\n    value: function setStream(apiCall, argument) {\n      var _this3 = this;\n\n      var retryRequestOptions = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n\n      if (this.type === StreamType.SERVER_STREAMING) {\n        var retryStream = retryRequest(null, {\n          objectMode: true,\n          request: function request() {\n            if (_this3._isCancelCalled) {\n              if (_this3.stream) {\n                _this3.stream.cancel();\n              }\n\n              return;\n            }\n\n            var stream = apiCall(argument, _this3._callback);\n            _this3.stream = stream;\n\n            _this3.forwardEvents(stream);\n\n            return stream;\n          },\n          retries: retryRequestOptions.retries,\n          currentRetryAttempt: retryRequestOptions.currentRetryAttempt,\n          noResponseRetries: retryRequestOptions.noResponseRetries,\n          shouldRetryFn: retryRequestOptions.shouldRetryFn\n        });\n        this.setReadable(retryStream);\n        return;\n      }\n\n      var stream = apiCall(argument, this._callback);\n      this.stream = stream;\n      this.forwardEvents(stream);\n\n      if (this.type === StreamType.CLIENT_STREAMING) {\n        this.setWritable(stream);\n      }\n\n      if (this.type === StreamType.BIDI_STREAMING) {\n        this.setReadable(stream);\n        this.setWritable(stream);\n      }\n\n      if (this._isCancelCalled && this.stream) {\n        this.stream.cancel();\n      }\n    }\n  }]);\n\n  return StreamProxy;\n}(duplexify);\n\nexports.StreamProxy = StreamProxy;","map":null,"metadata":{},"sourceType":"module"}