{"ast":null,"code":"\"use strict\";\n/**\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nfunction _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }\n\nfunction _nonIterableSpread() { throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\n\nfunction _iterableToArray(iter) { if (typeof Symbol !== \"undefined\" && Symbol.iterator in Object(iter)) return Array.from(iter); }\n\nfunction _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }\n\nfunction _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }\n\nfunction _nonIterableRest() { throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nfunction _iterableToArrayLimit(arr, i) { if (typeof Symbol === \"undefined\" || !(Symbol.iterator in Object(arr))) return; var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i[\"return\"] != null) _i[\"return\"](); } finally { if (_d) throw _e; } } return _arr; }\n\nfunction _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }\n\nfunction asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }\n\nfunction _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err); } _next(undefined); }); }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.PageDescriptor = void 0;\n\nvar ended = require(\"is-stream-ended\");\n\nvar stream_1 = require(\"stream\");\n\nvar normalApiCaller_1 = require(\"../normalCalls/normalApiCaller\");\n\nvar pagedApiCaller_1 = require(\"./pagedApiCaller\");\n/**\n * A descriptor for methods that support pagination.\n */\n\n\nvar PageDescriptor = /*#__PURE__*/function () {\n  function PageDescriptor(requestPageTokenField, responsePageTokenField, resourceField) {\n    _classCallCheck(this, PageDescriptor);\n\n    this.requestPageTokenField = requestPageTokenField;\n    this.responsePageTokenField = responsePageTokenField;\n    this.resourceField = resourceField;\n  }\n  /**\n   * Creates a new object Stream which emits the resource on 'data' event.\n   */\n\n\n  _createClass(PageDescriptor, [{\n    key: \"createStream\",\n    value: function createStream(apiCall, request, options) {\n      var stream = new stream_1.PassThrough({\n        objectMode: true\n      });\n      options = Object.assign({}, options, {\n        autoPaginate: false\n      });\n      var maxResults = 'maxResults' in options ? options.maxResults : -1;\n      var pushCount = 0;\n      var started = false;\n\n      function callback(err, resources, next, apiResp) {\n        if (err) {\n          stream.emit('error', err);\n          return;\n        } // emit full api response with every page.\n\n\n        stream.emit('response', apiResp);\n\n        for (var i = 0; i < resources.length; ++i) {\n          if (ended(stream)) {\n            return;\n          }\n\n          if (resources[i] === null) {\n            continue;\n          }\n\n          stream.push(resources[i]);\n          pushCount++;\n\n          if (pushCount === maxResults) {\n            stream.end();\n          }\n        }\n\n        if (ended(stream)) {\n          return;\n        }\n\n        if (!next) {\n          stream.end();\n          return;\n        } // When pageToken is specified in the original options, it will overwrite\n        // the page token field in the next request. Therefore it must be cleared.\n\n\n        if ('pageToken' in options) {\n          delete options.pageToken;\n        }\n\n        if (stream.isPaused()) {\n          request = next;\n          started = false;\n        } else {\n          setImmediate(apiCall, next, options, callback);\n        }\n      }\n\n      stream.on('resume', function () {\n        if (!started) {\n          started = true;\n          apiCall(request, options, callback);\n        }\n      });\n      return stream;\n    }\n    /**\n     * Create an async iterable which can be recursively called for data on-demand.\n     */\n\n  }, {\n    key: \"asyncIterate\",\n    value: function asyncIterate(apiCall, request, options) {\n      options = Object.assign({}, options, {\n        autoPaginate: false\n      });\n      var iterable = this.createIterator(apiCall, request, options);\n      return iterable;\n    }\n  }, {\n    key: \"createIterator\",\n    value: function createIterator(apiCall, request, options) {\n      var asyncIterable = _defineProperty({}, Symbol.asyncIterator, function () {\n        var nextPageRequest = request;\n        var cache = [];\n        return {\n          next: function next() {\n            return _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n              var result, _yield$apiCall, _yield$apiCall2;\n\n              return _regeneratorRuntime.wrap(function _callee$(_context) {\n                while (1) {\n                  switch (_context.prev = _context.next) {\n                    case 0:\n                      if (!(cache.length > 0)) {\n                        _context.next = 2;\n                        break;\n                      }\n\n                      return _context.abrupt(\"return\", Promise.resolve({\n                        done: false,\n                        value: cache.shift()\n                      }));\n\n                    case 2:\n                      if (!nextPageRequest) {\n                        _context.next = 10;\n                        break;\n                      }\n\n                      _context.next = 5;\n                      return apiCall(nextPageRequest, options);\n\n                    case 5:\n                      _yield$apiCall = _context.sent;\n                      _yield$apiCall2 = _slicedToArray(_yield$apiCall, 2);\n                      result = _yield$apiCall2[0];\n                      nextPageRequest = _yield$apiCall2[1];\n                      cache.push.apply(cache, _toConsumableArray(result));\n\n                    case 10:\n                      if (!(cache.length === 0)) {\n                        _context.next = 12;\n                        break;\n                      }\n\n                      return _context.abrupt(\"return\", Promise.resolve({\n                        done: true,\n                        value: undefined\n                      }));\n\n                    case 12:\n                      return _context.abrupt(\"return\", Promise.resolve({\n                        done: false,\n                        value: cache.shift()\n                      }));\n\n                    case 13:\n                    case \"end\":\n                      return _context.stop();\n                  }\n                }\n              }, _callee);\n            }))();\n          }\n        };\n      });\n\n      return asyncIterable;\n    }\n  }, {\n    key: \"getApiCaller\",\n    value: function getApiCaller(settings) {\n      if (!settings.autoPaginate) {\n        return new normalApiCaller_1.NormalApiCaller();\n      }\n\n      return new pagedApiCaller_1.PagedApiCaller(this);\n    }\n  }]);\n\n  return PageDescriptor;\n}();\n\nexports.PageDescriptor = PageDescriptor;","map":null,"metadata":{},"sourceType":"module"}