{"ast":null,"code":"\"use strict\"; // Copyright 2019 Google LLC\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n/* global window */\n\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\n\nfunction _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }\n\nfunction _nonIterableSpread() { throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _iterableToArray(iter) { if (typeof Symbol !== \"undefined\" && Symbol.iterator in Object(iter)) return Array.from(iter); }\n\nfunction _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nfunction asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }\n\nfunction _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err); } _next(undefined); }); }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.BrowserCrypto = void 0; // This file implements crypto functions we need using in-browser\n// SubtleCrypto interface `window.crypto.subtle`.\n\nvar base64js = require(\"base64-js\"); // Not all browsers support `TextEncoder`. The following `require` will\n// provide a fast UTF8-only replacement for those browsers that don't support\n// text encoding natively.\n// eslint-disable-next-line node/no-unsupported-features/node-builtins\n\n\nif (typeof process === 'undefined' && typeof TextEncoder === 'undefined') {\n  require('fast-text-encoding');\n}\n\nvar crypto_1 = require(\"../crypto\");\n\nvar BrowserCrypto = /*#__PURE__*/function () {\n  function BrowserCrypto() {\n    _classCallCheck(this, BrowserCrypto);\n\n    if (typeof window === 'undefined' || window.crypto === undefined || window.crypto.subtle === undefined) {\n      throw new Error(\"SubtleCrypto not found. Make sure it's an https:// website.\");\n    }\n  }\n\n  _createClass(BrowserCrypto, [{\n    key: \"sha256DigestBase64\",\n    value: function () {\n      var _sha256DigestBase = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(str) {\n        var inputBuffer, outputBuffer;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                // SubtleCrypto digest() method is async, so we must make\n                // this method async as well.\n                // To calculate SHA256 digest using SubtleCrypto, we first\n                // need to convert an input string to an ArrayBuffer:\n                // eslint-disable-next-line node/no-unsupported-features/node-builtins\n                inputBuffer = new TextEncoder().encode(str); // Result is ArrayBuffer as well.\n\n                _context.next = 3;\n                return window.crypto.subtle.digest('SHA-256', inputBuffer);\n\n              case 3:\n                outputBuffer = _context.sent;\n                return _context.abrupt(\"return\", base64js.fromByteArray(new Uint8Array(outputBuffer)));\n\n              case 5:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee);\n      }));\n\n      function sha256DigestBase64(_x) {\n        return _sha256DigestBase.apply(this, arguments);\n      }\n\n      return sha256DigestBase64;\n    }()\n  }, {\n    key: \"randomBytesBase64\",\n    value: function randomBytesBase64(count) {\n      var array = new Uint8Array(count);\n      window.crypto.getRandomValues(array);\n      return base64js.fromByteArray(array);\n    }\n  }, {\n    key: \"verify\",\n    value: function () {\n      var _verify = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(pubkey, data, signature) {\n        var algo, dataArray, signatureArray, cryptoKey, result;\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                algo = {\n                  name: 'RSASSA-PKCS1-v1_5',\n                  hash: {\n                    name: 'SHA-256'\n                  }\n                }; // eslint-disable-next-line node/no-unsupported-features/node-builtins\n\n                dataArray = new TextEncoder().encode(data);\n                signatureArray = base64js.toByteArray(BrowserCrypto.padBase64(signature));\n                _context2.next = 5;\n                return window.crypto.subtle.importKey('jwk', pubkey, algo, true, ['verify']);\n\n              case 5:\n                cryptoKey = _context2.sent;\n                _context2.next = 8;\n                return window.crypto.subtle.verify(algo, cryptoKey, signatureArray, dataArray);\n\n              case 8:\n                result = _context2.sent;\n                return _context2.abrupt(\"return\", result);\n\n              case 10:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2);\n      }));\n\n      function verify(_x2, _x3, _x4) {\n        return _verify.apply(this, arguments);\n      }\n\n      return verify;\n    }()\n  }, {\n    key: \"sign\",\n    value: function () {\n      var _sign = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3(privateKey, data) {\n        var algo, dataArray, cryptoKey, result;\n        return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                algo = {\n                  name: 'RSASSA-PKCS1-v1_5',\n                  hash: {\n                    name: 'SHA-256'\n                  }\n                }; // eslint-disable-next-line node/no-unsupported-features/node-builtins\n\n                dataArray = new TextEncoder().encode(data);\n                _context3.next = 4;\n                return window.crypto.subtle.importKey('jwk', privateKey, algo, true, ['sign']);\n\n              case 4:\n                cryptoKey = _context3.sent;\n                _context3.next = 7;\n                return window.crypto.subtle.sign(algo, cryptoKey, dataArray);\n\n              case 7:\n                result = _context3.sent;\n                return _context3.abrupt(\"return\", base64js.fromByteArray(new Uint8Array(result)));\n\n              case 9:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3);\n      }));\n\n      function sign(_x5, _x6) {\n        return _sign.apply(this, arguments);\n      }\n\n      return sign;\n    }()\n  }, {\n    key: \"decodeBase64StringUtf8\",\n    value: function decodeBase64StringUtf8(base64) {\n      var uint8array = base64js.toByteArray(BrowserCrypto.padBase64(base64)); // eslint-disable-next-line node/no-unsupported-features/node-builtins\n\n      var result = new TextDecoder().decode(uint8array);\n      return result;\n    }\n  }, {\n    key: \"encodeBase64StringUtf8\",\n    value: function encodeBase64StringUtf8(text) {\n      // eslint-disable-next-line node/no-unsupported-features/node-builtins\n      var uint8array = new TextEncoder().encode(text);\n      var result = base64js.fromByteArray(uint8array);\n      return result;\n    }\n    /**\n     * Computes the SHA-256 hash of the provided string.\n     * @param str The plain text string to hash.\n     * @return A promise that resolves with the SHA-256 hash of the provided\n     *   string in hexadecimal encoding.\n     */\n\n  }, {\n    key: \"sha256DigestHex\",\n    value: function () {\n      var _sha256DigestHex = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee4(str) {\n        var inputBuffer, outputBuffer;\n        return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                // SubtleCrypto digest() method is async, so we must make\n                // this method async as well.\n                // To calculate SHA256 digest using SubtleCrypto, we first\n                // need to convert an input string to an ArrayBuffer:\n                // eslint-disable-next-line node/no-unsupported-features/node-builtins\n                inputBuffer = new TextEncoder().encode(str); // Result is ArrayBuffer as well.\n\n                _context4.next = 3;\n                return window.crypto.subtle.digest('SHA-256', inputBuffer);\n\n              case 3:\n                outputBuffer = _context4.sent;\n                return _context4.abrupt(\"return\", crypto_1.fromArrayBufferToHex(outputBuffer));\n\n              case 5:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4);\n      }));\n\n      function sha256DigestHex(_x7) {\n        return _sha256DigestHex.apply(this, arguments);\n      }\n\n      return sha256DigestHex;\n    }()\n    /**\n     * Computes the HMAC hash of a message using the provided crypto key and the\n     * SHA-256 algorithm.\n     * @param key The secret crypto key in utf-8 or ArrayBuffer format.\n     * @param msg The plain text message.\n     * @return A promise that resolves with the HMAC-SHA256 hash in ArrayBuffer\n     *   format.\n     */\n\n  }, {\n    key: \"signWithHmacSha256\",\n    value: function () {\n      var _signWithHmacSha = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee5(key, msg) {\n        var rawKey, enc, cryptoKey;\n        return _regeneratorRuntime.wrap(function _callee5$(_context5) {\n          while (1) {\n            switch (_context5.prev = _context5.next) {\n              case 0:\n                // Convert key, if provided in ArrayBuffer format, to string.\n                rawKey = typeof key === 'string' ? key : String.fromCharCode.apply(String, _toConsumableArray(new Uint16Array(key))); // eslint-disable-next-line node/no-unsupported-features/node-builtins\n\n                enc = new TextEncoder();\n                _context5.next = 4;\n                return window.crypto.subtle.importKey('raw', enc.encode(rawKey), {\n                  name: 'HMAC',\n                  hash: {\n                    name: 'SHA-256'\n                  }\n                }, false, ['sign']);\n\n              case 4:\n                cryptoKey = _context5.sent;\n                return _context5.abrupt(\"return\", window.crypto.subtle.sign('HMAC', cryptoKey, enc.encode(msg)));\n\n              case 6:\n              case \"end\":\n                return _context5.stop();\n            }\n          }\n        }, _callee5);\n      }));\n\n      function signWithHmacSha256(_x8, _x9) {\n        return _signWithHmacSha.apply(this, arguments);\n      }\n\n      return signWithHmacSha256;\n    }()\n  }], [{\n    key: \"padBase64\",\n    value: function padBase64(base64) {\n      // base64js requires padding, so let's add some '='\n      while (base64.length % 4 !== 0) {\n        base64 += '=';\n      }\n\n      return base64;\n    }\n  }]);\n\n  return BrowserCrypto;\n}();\n\nexports.BrowserCrypto = BrowserCrypto;","map":null,"metadata":{},"sourceType":"module"}