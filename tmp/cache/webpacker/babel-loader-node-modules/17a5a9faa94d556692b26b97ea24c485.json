{"ast":null,"code":"\"use strict\";\n/**\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\n\nfunction _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }\n\nfunction _nonIterableRest() { throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\n\nfunction _iterableToArrayLimit(arr, i) { if (typeof Symbol === \"undefined\" || !(Symbol.iterator in Object(arr))) return; var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i[\"return\"] != null) _i[\"return\"](); } finally { if (_d) throw _e; } } return _arr; }\n\nfunction _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }\n\nfunction _createForOfIteratorHelper(o, allowArrayLike) { var it; if (typeof Symbol === \"undefined\" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e2) { throw _e2; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = o[Symbol.iterator](); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e3) { didErr = true; err = _e3; }, f: function f() { try { if (!normalCompletion && it[\"return\"] != null) it[\"return\"](); } finally { if (didErr) throw err; } } }; }\n\nfunction asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }\n\nfunction _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err); } _next(undefined); }); }; }\n\nfunction _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }\n\nfunction _nonIterableSpread() { throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _iterableToArray(iter) { if (typeof Symbol !== \"undefined\" && Symbol.iterator in Object(iter)) return Array.from(iter); }\n\nfunction _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nvar _a, _b;\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.fallback = exports.protobuf = exports.createApiCall = exports.lro = exports.GrpcClient = exports.version = exports.routingHeader = void 0; // Not all browsers support `TextEncoder`. The following `require` will\n// provide a fast UTF8-only replacement for those browsers that don't support\n// text encoding natively.\n\nvar isbrowser_1 = require(\"./isbrowser\");\n\nvar needTextEncoderPolyfill = false;\n\nif (isbrowser_1.isBrowser() && ( // eslint-disable-next-line node/no-unsupported-features/node-builtins\ntypeof TextEncoder === 'undefined' || typeof TextDecoder === 'undefined')) {\n  needTextEncoderPolyfill = true;\n}\n\nif (typeof process !== 'undefined' && ((_a = process === null || process === void 0 ? void 0 : process.versions) === null || _a === void 0 ? void 0 : _a.node) && ((_b = process === null || process === void 0 ? void 0 : process.versions) === null || _b === void 0 ? void 0 : _b.node.match(/^10\\./))) {\n  // Node.js 10 does not have global TextDecoder\n  // TODO(@alexander-fenster): remove this logic after Node.js 10 is EOL.\n  // eslint-disable-next-line @typescript-eslint/no-var-requires\n  var util = require('util');\n\n  Object.assign(global, {\n    TextDecoder: util.TextDecoder,\n    TextEncoder: util.TextEncoder\n  });\n}\n\nif (needTextEncoderPolyfill) {\n  require('fast-text-encoding');\n}\n\nvar protobuf = require(\"protobufjs\");\n\nexports.protobuf = protobuf;\n\nvar gax = require(\"./gax\");\n\nvar nodeFetch = require(\"node-fetch\");\n\nvar routingHeader = require(\"./routingHeader\");\n\nexports.routingHeader = routingHeader;\n\nvar abort_controller_1 = require(\"abort-controller\");\n\nvar status_1 = require(\"./status\");\n\nvar google_auth_library_1 = require(\"google-auth-library\");\n\nvar operationsClient_1 = require(\"./operationsClient\");\n\nvar createApiCall_1 = require(\"./createApiCall\");\n\nvar fallbackError_1 = require(\"./fallbackError\");\n\nvar transcoding_1 = require(\"./transcoding\");\n\nvar pathTemplate_1 = require(\"./pathTemplate\");\n\nObject.defineProperty(exports, \"PathTemplate\", {\n  enumerable: true,\n  get: function get() {\n    return pathTemplate_1.PathTemplate;\n  }\n});\n\nvar gax_1 = require(\"./gax\");\n\nObject.defineProperty(exports, \"CallSettings\", {\n  enumerable: true,\n  get: function get() {\n    return gax_1.CallSettings;\n  }\n});\nObject.defineProperty(exports, \"constructSettings\", {\n  enumerable: true,\n  get: function get() {\n    return gax_1.constructSettings;\n  }\n});\nObject.defineProperty(exports, \"RetryOptions\", {\n  enumerable: true,\n  get: function get() {\n    return gax_1.RetryOptions;\n  }\n});\nexports.version = require('../../package.json').version + '-fallback';\n\nvar descriptor_1 = require(\"./descriptor\");\n\nObject.defineProperty(exports, \"BundleDescriptor\", {\n  enumerable: true,\n  get: function get() {\n    return descriptor_1.BundleDescriptor;\n  }\n});\nObject.defineProperty(exports, \"LongrunningDescriptor\", {\n  enumerable: true,\n  get: function get() {\n    return descriptor_1.LongrunningDescriptor;\n  }\n});\nObject.defineProperty(exports, \"PageDescriptor\", {\n  enumerable: true,\n  get: function get() {\n    return descriptor_1.PageDescriptor;\n  }\n});\nObject.defineProperty(exports, \"StreamDescriptor\", {\n  enumerable: true,\n  get: function get() {\n    return descriptor_1.StreamDescriptor;\n  }\n});\n\nvar streaming_1 = require(\"./streamingCalls/streaming\");\n\nObject.defineProperty(exports, \"StreamType\", {\n  enumerable: true,\n  get: function get() {\n    return streaming_1.StreamType;\n  }\n});\nvar CLIENT_VERSION_HEADER = 'x-goog-api-client';\n\nvar GrpcClient = /*#__PURE__*/function () {\n  /**\n   * gRPC-fallback version of GrpcClient\n   * Implements GrpcClient API for a browser using grpc-fallback protocol (sends serialized protobuf to HTTP/1 $rpc endpoint).\n   *\n   * @param {Object=} options.auth - An instance of OAuth2Client to use in browser, or an instance of GoogleAuth from google-auth-library\n   *  to use in Node.js. Required for browser, optional for Node.js.\n   * @constructor\n   */\n  function GrpcClient() {\n    var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n    _classCallCheck(this, GrpcClient);\n\n    if (isbrowser_1.isBrowser()) {\n      if (!options.auth) {\n        throw new Error(JSON.stringify(options) + 'You need to pass auth instance to use gRPC-fallback client in browser. Use OAuth2Client from google-auth-library.');\n      }\n\n      this.auth = options.auth;\n    } else {\n      this.auth = options.auth || new google_auth_library_1.GoogleAuth(options);\n    }\n\n    this.fallback = options.fallback !== 'rest' ? 'proto' : 'rest';\n    this.grpcVersion = 'fallback'; // won't be used anywhere but we need it to exist in the class\n  }\n  /**\n   * gRPC-fallback version of loadProto\n   * Loads the protobuf root object from a JSON object created from a proto file\n   * @param {Object} jsonObject - A JSON version of a protofile created usin protobuf.js\n   * @returns {Object} Root namespace of proto JSON\n   */\n\n\n  _createClass(GrpcClient, [{\n    key: \"loadProto\",\n    value: function loadProto(jsonObject) {\n      var rootObject = protobuf.Root.fromJSON(jsonObject);\n      return rootObject;\n    }\n  }, {\n    key: \"getServiceMethods\",\n    value: function getServiceMethods(service) {\n      var methods = Object.keys(service.methods);\n      var methodsLowerCamelCase = methods.map(function (method) {\n        return method[0].toLowerCase() + method.substring(1);\n      });\n      return methodsLowerCamelCase;\n    }\n    /**\n     * gRPC-fallback version of constructSettings\n     * A wrapper of {@link constructSettings} function under the gRPC context.\n     *\n     * Most of parameters are common among constructSettings, please take a look.\n     * @param {string} serviceName - The fullly-qualified name of the service.\n     * @param {Object} clientConfig - A dictionary of the client config.\n     * @param {Object} configOverrides - A dictionary of overriding configs.\n     * @param {Object} headers - A dictionary of additional HTTP header name to\n     *   its value.\n     * @return {Object} A mapping of method names to CallSettings.\n     */\n\n  }, {\n    key: \"constructSettings\",\n    value: function constructSettings(serviceName, clientConfig, configOverrides, headers) {\n      function buildMetadata(abTests, moreHeaders) {\n        var metadata = {};\n\n        if (!headers) {\n          headers = {};\n        } // Since gRPC expects each header to be an array,\n        // we are doing the same for fallback here.\n\n\n        for (var key in headers) {\n          metadata[key] = Array.isArray(headers[key]) ? headers[key] : [headers[key]];\n        } // gRPC-fallback request must have 'grpc-web/' in 'x-goog-api-client'\n\n\n        var clientVersions = [];\n\n        if (metadata[CLIENT_VERSION_HEADER] && metadata[CLIENT_VERSION_HEADER][0]) {\n          clientVersions.push.apply(clientVersions, _toConsumableArray(metadata[CLIENT_VERSION_HEADER][0].split(' ')));\n        }\n\n        clientVersions.push(\"grpc-web/\".concat(exports.version));\n        metadata[CLIENT_VERSION_HEADER] = [clientVersions.join(' ')];\n\n        if (!moreHeaders) {\n          return metadata;\n        }\n\n        for (var _key in moreHeaders) {\n          if (_key.toLowerCase() !== CLIENT_VERSION_HEADER) {\n            var value = moreHeaders[_key];\n\n            if (Array.isArray(value)) {\n              if (metadata[_key] === undefined) {\n                metadata[_key] = value;\n              } else {\n                if (Array.isArray(metadata[_key])) {\n                  var _metadata$_key;\n\n                  (_metadata$_key = metadata[_key]).push.apply(_metadata$_key, _toConsumableArray(value));\n                } else {\n                  throw new Error(\"Can not add value \".concat(value, \" to the call metadata.\"));\n                }\n              }\n            } else {\n              metadata[_key] = [value];\n            }\n          }\n        }\n\n        return metadata;\n      }\n\n      return gax.constructSettings(serviceName, clientConfig, configOverrides, status_1.Status, {\n        metadataBuilder: buildMetadata\n      });\n    }\n    /**\n     * gRPC-fallback version of createStub\n     * Creates a gRPC-fallback stub with authentication headers built from supplied OAuth2Client instance\n     *\n     * @param {function} CreateStub - The constructor function of the stub.\n     * @param {Object} service - A protobufjs Service object (as returned by lookupService)\n     * @param {Object} opts - Connection options, as described below.\n     * @param {string} opts.servicePath - The hostname of the API endpoint service.\n     * @param {number} opts.port - The port of the service.\n     * @return {Promise} A promise which resolves to a gRPC-fallback service stub, which is a protobuf.js service stub instance modified to match the gRPC stub API\n     */\n\n  }, {\n    key: \"createStub\",\n    value: function () {\n      var _createStub = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(service, opts) {\n        var _this = this;\n\n        var serviceClientImpl, statusDecoder, authHeader, serviceStub, methods, newServiceStub, _iterator, _step, _loop;\n\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                serviceClientImpl = function _serviceClientImpl(method, requestData, callback) {\n                  return [method, requestData, callback];\n                };\n\n                // decoder for google.rpc.Status messages\n                statusDecoder = new fallbackError_1.FallbackErrorDecoder();\n\n                if (this.authClient) {\n                  _context.next = 10;\n                  break;\n                }\n\n                if (!(this.auth && 'getClient' in this.auth)) {\n                  _context.next = 9;\n                  break;\n                }\n\n                _context.next = 6;\n                return this.auth.getClient();\n\n              case 6:\n                this.authClient = _context.sent;\n                _context.next = 10;\n                break;\n\n              case 9:\n                if (this.auth && 'getRequestHeaders' in this.auth) {\n                  this.authClient = this.auth;\n                }\n\n              case 10:\n                if (this.authClient) {\n                  _context.next = 12;\n                  break;\n                }\n\n                throw new Error('No authentication was provided');\n\n              case 12:\n                _context.next = 14;\n                return this.authClient.getRequestHeaders();\n\n              case 14:\n                authHeader = _context.sent;\n                serviceStub = service.create(serviceClientImpl, false, false);\n                methods = this.getServiceMethods(service);\n                newServiceStub = service.create(serviceClientImpl, false, false);\n                _iterator = _createForOfIteratorHelper(methods);\n\n                try {\n                  _loop = function _loop() {\n                    var methodName = _step.value;\n\n                    newServiceStub[methodName] = function (req, options, metadata, callback) {\n                      var _serviceStub$methodNa = serviceStub[methodName].apply(serviceStub, [req, callback]),\n                          _serviceStub$methodNa2 = _slicedToArray(_serviceStub$methodNa, 3),\n                          method = _serviceStub$methodNa2[0],\n                          requestData = _serviceStub$methodNa2[1],\n                          serviceCallback = _serviceStub$methodNa2[2]; // eslint-disable-next-line @typescript-eslint/no-explicit-any\n\n\n                      var cancelController, cancelSignal;\n\n                      if (isbrowser_1.isBrowser && typeof AbortController !== 'undefined') {\n                        // eslint-disable-next-line no-undef\n                        cancelController = new AbortController();\n                      } else {\n                        cancelController = new abort_controller_1.AbortController();\n                      }\n\n                      if (cancelController) {\n                        cancelSignal = cancelController.signal;\n                      }\n\n                      var cancelRequested = false;\n                      var headers = Object.assign({}, authHeader);\n\n                      for (var _i2 = 0, _Object$keys = Object.keys(options); _i2 < _Object$keys.length; _i2++) {\n                        var key = _Object$keys[_i2];\n                        headers[key] = options[key][0];\n                      }\n\n                      var grpcFallbackProtocol = opts.protocol || 'https';\n                      var servicePath = opts.servicePath;\n\n                      if (!servicePath && service.options && service.options['(google.api.default_host)']) {\n                        servicePath = service.options['(google.api.default_host)'];\n                      }\n\n                      if (!servicePath) {\n                        serviceCallback(new Error('Service path is undefined'));\n                        return;\n                      }\n\n                      var servicePort;\n                      var match = servicePath.match(/^(.*):(\\d+)$/);\n\n                      if (match) {\n                        servicePath = match[1];\n                        servicePort = match[2];\n                      }\n\n                      if (opts.port) {\n                        servicePort = opts.port;\n                      } else if (!servicePort) {\n                        servicePort = 443;\n                      }\n\n                      var protoNamespaces = [];\n                      var currNamespace = method.parent;\n\n                      while (currNamespace.name !== '') {\n                        protoNamespaces.unshift(currNamespace.name);\n                        currNamespace = currNamespace.parent;\n                      }\n\n                      var protoServiceName = protoNamespaces.join('.');\n                      var rpcName = method.name;\n                      var url;\n                      var data;\n                      var httpMethod; // TODO(@alexander-fenster): refactor this into separate function that prepares\n                      // request object for `fetch`.\n\n                      if (_this.fallback === 'rest') {\n                        // REGAPIC: JSON over HTTP/1 with gRPC trancoding\n                        headers['Content-Type'] = 'application/json';\n                        var decodedRequest = method.resolvedRequestType.decode(requestData);\n                        var requestJSON = method.resolvedRequestType.toObject( // TODO: use toJSON instead of toObject\n                        decodedRequest);\n                        var transcoded = transcoding_1.transcode(requestJSON, method.parsedOptions);\n\n                        if (!transcoded) {\n                          throw new Error(\"Cannot build HTTP request for \".concat(JSON.stringify(requestJSON), \", method: \").concat(method.name));\n                        }\n\n                        httpMethod = transcoded.httpMethod;\n                        data = JSON.stringify(transcoded.data);\n                        url = \"\".concat(grpcFallbackProtocol, \"://\").concat(servicePath, \":\").concat(servicePort, \"/\").concat(transcoded.url.replace(/^\\//, ''), \"?\").concat(transcoded.queryString);\n                      } else {\n                        // gRPC-fallback: proto over HTTP/1\n                        headers['Content-Type'] = 'application/x-protobuf';\n                        httpMethod = 'post';\n                        data = requestData;\n                        url = \"\".concat(grpcFallbackProtocol, \"://\").concat(servicePath, \":\").concat(servicePort, \"/$rpc/\").concat(protoServiceName, \"/\").concat(rpcName);\n                      }\n\n                      var fetch = isbrowser_1.isBrowser() ? // eslint-disable-next-line no-undef\n                      window.fetch : nodeFetch;\n                      var fetchRequest = {\n                        headers: headers,\n                        body: data,\n                        method: httpMethod,\n                        signal: cancelSignal\n                      };\n\n                      if (httpMethod === 'get' || httpMethod === 'delete' || httpMethod === 'head') {\n                        delete fetchRequest['body'];\n                      }\n\n                      fetch(url, fetchRequest).then(function (response) {\n                        return Promise.all([Promise.resolve(response.ok), response.arrayBuffer()]);\n                      }).then(function (_ref) {\n                        var _ref2 = _slicedToArray(_ref, 2),\n                            ok = _ref2[0],\n                            buffer = _ref2[1];\n\n                        // TODO(@alexander-fenster): response processing to be moved\n                        // to a separate function.\n                        if (_this.fallback === 'rest') {\n                          // REGAPIC: JSON over HTTP/1\n                          // eslint-disable-next-line node/no-unsupported-features/node-builtins\n                          var decodedString = new TextDecoder().decode(buffer);\n                          var response = JSON.parse(decodedString);\n\n                          if (!ok) {\n                            var error = Object.assign(new Error(response['error']['message']), response.error);\n                            throw error;\n                          }\n\n                          var message = method.resolvedResponseType.fromObject(response);\n                          var encoded = method.resolvedResponseType.encode(message).finish();\n                          serviceCallback(null, encoded);\n                        } else {\n                          // gRPC-fallback: proto over HTTP/1\n                          if (!ok) {\n                            var _error = statusDecoder.decodeErrorFromBuffer(buffer);\n\n                            throw _error;\n                          }\n\n                          serviceCallback(null, new Uint8Array(buffer));\n                        }\n                      })[\"catch\"](function (err) {\n                        if (!cancelRequested || err.name !== 'AbortError') {\n                          serviceCallback(err);\n                        }\n                      });\n                      return {\n                        cancel: function cancel() {\n                          if (!cancelController) {\n                            console.warn('AbortController not found: Cancellation is not supported in this environment');\n                            return;\n                          }\n\n                          cancelRequested = true;\n                          cancelController.abort();\n                        }\n                      };\n                    };\n                  };\n\n                  for (_iterator.s(); !(_step = _iterator.n()).done;) {\n                    _loop();\n                  }\n                } catch (err) {\n                  _iterator.e(err);\n                } finally {\n                  _iterator.f();\n                }\n\n                return _context.abrupt(\"return\", newServiceStub);\n\n              case 21:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function createStub(_x, _x2) {\n        return _createStub.apply(this, arguments);\n      }\n\n      return createStub;\n    }()\n  }]);\n\n  return GrpcClient;\n}();\n\nexports.GrpcClient = GrpcClient;\n/**\n * gRPC-fallback version of lro\n *\n * @param {Object=} options.auth - An instance of google-auth-library.\n * @return {Object} A OperationsClientBuilder that will return a OperationsClient\n */\n\nfunction lro(options) {\n  options = Object.assign({\n    scopes: []\n  }, options);\n  var gaxGrpc = new GrpcClient(options);\n  return new operationsClient_1.OperationsClientBuilder(gaxGrpc);\n}\n\nexports.lro = lro;\n/**\n * gRPC-fallback version of createApiCall\n *\n * Converts an rpc call into an API call governed by the settings.\n *\n * In typical usage, `func` will be a promise to a callable used to make an rpc\n * request. This will mostly likely be a bound method from a request stub used\n * to make an rpc call. It is not a direct function but a Promise instance,\n * because of its asynchronism (typically, obtaining the auth information).\n *\n * The result is a function which manages the API call with the given settings\n * and the options on the invocation.\n *\n * Throws exception on unsupported streaming calls\n *\n * @param {Promise<GRPCCall>|GRPCCall} func - is either a promise to be used to make\n *   a bare RPC call, or just a bare RPC call.\n * @param {CallSettings} settings - provides the settings for this call\n * @param {Descriptor} descriptor - optionally specify the descriptor for\n *   the method call.\n * @return {GaxCall} func - a bound method on a request stub used\n *   to make an rpc call.\n */\n\nfunction createApiCall(func, settings, descriptor) {\n  if (descriptor && 'streaming' in descriptor) {\n    return function () {\n      throw new Error('The gRPC-fallback client library (e.g. browser version of the library) currently does not support streaming calls.');\n    };\n  }\n\n  return createApiCall_1.createApiCall(func, settings, descriptor);\n}\n\nexports.createApiCall = createApiCall;\nexports.protobufMinimal = require(\"protobufjs/minimal\"); // Different environments or bundlers may or may not respect \"browser\" field\n// in package.json (e.g. Electron does not respect it, but if you run the code\n// through webpack first, it will follow the \"browser\" field).\n// To make it safer and more compatible, let's make sure that if you do\n// const gax = require(\"google-gax\");\n// you can always ask for gax.fallback, regardless of \"browser\" field being\n// understood or not.\n\nvar fallback = module.exports;\nexports.fallback = fallback;","map":null,"metadata":{},"sourceType":"module"}