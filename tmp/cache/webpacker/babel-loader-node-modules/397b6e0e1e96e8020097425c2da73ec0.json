{"ast":null,"code":"\"use strict\";\n/**\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.StreamDescriptor = void 0;\n\nvar streamingApiCaller_1 = require(\"./streamingApiCaller\");\n/**\n * A descriptor for streaming calls.\n */\n\n\nvar StreamDescriptor = /*#__PURE__*/function () {\n  function StreamDescriptor(streamType) {\n    _classCallCheck(this, StreamDescriptor);\n\n    this.type = streamType;\n    this.streaming = true;\n  }\n\n  _createClass(StreamDescriptor, [{\n    key: \"getApiCaller\",\n    value: function getApiCaller(settings) {\n      // Right now retrying does not work with gRPC-streaming, because retryable\n      // assumes an API call returns an event emitter while gRPC-streaming methods\n      // return Stream.\n      // TODO: support retrying.\n      settings.retry = null;\n      return new streamingApiCaller_1.StreamingApiCaller(this);\n    }\n  }]);\n\n  return StreamDescriptor;\n}();\n\nexports.StreamDescriptor = StreamDescriptor;","map":null,"metadata":{},"sourceType":"module"}