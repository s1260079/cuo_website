{"ast":null,"code":"\"use strict\";\n/**\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nfunction _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }\n\nfunction _nonIterableSpread() { throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _iterableToArray(iter) { if (typeof Symbol !== \"undefined\" && Symbol.iterator in Object(iter)) return Array.from(iter); }\n\nfunction _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.snakeToCamelCase = exports.camelToSnakeCase = void 0;\n/**\n * Converts a given string from camelCase (used by protobuf.js and in JSON)\n * to snake_case (normally used in proto definitions).\n */\n\nfunction camelToSnakeCase(str) {\n  return str.replace(/[A-Z]/g, function (letter) {\n    return \"_\".concat(letter.toLowerCase());\n  });\n}\n\nexports.camelToSnakeCase = camelToSnakeCase;\n/**\n * Capitalizes the first character of the given string.\n */\n\nfunction capitalize(str) {\n  if (str.length === 0) {\n    return str;\n  }\n\n  return str[0].toUpperCase() + str.slice(1);\n}\n/**\n * Converts a given string from snake_case (normally used in proto definitions) to\n * camelCase (used by protobuf.js)\n */\n\n\nfunction snakeToCamelCase(str) {\n  // split on spaces, non-alphanumeric, or capital letters\n  var splitted = str.split(/(?=[A-Z])|[\\s\\W_]+/).filter(function (w) {\n    return w.length > 0;\n  }).map(function (word) {\n    return word.toLowerCase();\n  });\n\n  if (splitted.length === 0) {\n    return str;\n  }\n\n  return [splitted[0]].concat(_toConsumableArray(splitted.slice(1).map(capitalize))).join('');\n}\n\nexports.snakeToCamelCase = snakeToCamelCase;","map":null,"metadata":{},"sourceType":"module"}