{"ast":null,"code":"function _createForOfIteratorHelper(o, allowArrayLike) { var it; if (typeof Symbol === \"undefined\" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = o[Symbol.iterator](); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it[\"return\"] != null) it[\"return\"](); } finally { if (didErr) throw err; } } }; }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\n/**\n * Carousel preparation methods\n */\nvar mixin = {\n  methods: {\n    /**\n     * Prepare slides classes and styles\n     */\n    prepareSlides: function prepareSlides() {\n      this.slides = this.htmlCollectionToArray(this.$refs.slides.children); // Probably timeout needed\n\n      if (this.slidesCloned) {\n        this.slidesClonedBefore = this.htmlCollectionToArray(this.$refs.slidesClonedBefore.children);\n        this.slidesClonedAfter = this.htmlCollectionToArray(this.$refs.slidesClonedAfter.children);\n      }\n\n      var _iterator = _createForOfIteratorHelper(this.slidesAll),\n          _step;\n\n      try {\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          var slide = _step.value;\n          slide.classList.add('agile__slide');\n        }\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n    },\n\n    /**\n     *  Prepare slides active/current classes\n     */\n    prepareSlidesClasses: function prepareSlidesClasses() {\n      var _this = this;\n\n      if (this.currentSlide === null) {\n        return false;\n      } // Remove active & current classes\n\n\n      for (var i = 0; i < this.countSlides; i++) {\n        this.slides[i].classList.remove('agile__slide--active');\n        this.slides[i].classList.remove('agile__slide--current');\n      } // Add active & current class for current slide\n\n\n      setTimeout(function () {\n        return _this.slides[_this.currentSlide].classList.add('agile__slide--active');\n      }, this.changeDelay);\n      var start = this.slidesCloned ? this.countSlides + this.currentSlide : this.currentSlide;\n\n      if (this.centerMode) {\n        start -= Math.floor(this.settings.slidesToShow / 2) - +(this.settings.slidesToShow % 2 === 0);\n      } // To account for the combination of infinite = false and centerMode = true, ensure we don't overrun the bounds of the slide count.\n\n\n      for (var _i = Math.max(start, 0); _i < Math.min(start + this.settings.slidesToShow, this.countSlides); _i++) {\n        this.slidesAll[_i].classList.add('agile__slide--current');\n      }\n    },\n\n    /**\n     * Prepare carousel styles\n     */\n    prepareCarousel: function prepareCarousel() {\n      // Prepare track\n      if (this.settings.unagile) {\n        this.translateX = 0;\n      } else {\n        if (this.currentSlide === null && this.countSlides) {\n          this.currentSlide = this.settings.initialSlide;\n        }\n\n        if (this.currentSlide > this.countSlides) {\n          this.currentSlide = this.countSlides - 1;\n        }\n\n        this.goTo(this.currentSlide, false, false);\n      }\n    }\n  }\n};\nexport default mixin;","map":null,"metadata":{},"sourceType":"module"}