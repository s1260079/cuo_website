{"ast":null,"code":"\"use strict\";\n/*\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *       http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nfunction _typeof(obj) { \"@babel/helpers - typeof\"; if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function\"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }\n\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) { return call; } return _assertThisInitialized(self); }\n\nfunction _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return self; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nfunction _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }\n\nfunction _awaitAsyncGenerator(value) { return new _AwaitValue(value); }\n\nfunction _wrapAsyncGenerator(fn) { return function () { return new _AsyncGenerator(fn.apply(this, arguments)); }; }\n\nfunction _AsyncGenerator(gen) { var front, back; function send(key, arg) { return new Promise(function (resolve, reject) { var request = { key: key, arg: arg, resolve: resolve, reject: reject, next: null }; if (back) { back = back.next = request; } else { front = back = request; resume(key, arg); } }); } function resume(key, arg) { try { var result = gen[key](arg); var value = result.value; var wrappedAwait = value instanceof _AwaitValue; Promise.resolve(wrappedAwait ? value.wrapped : value).then(function (arg) { if (wrappedAwait) { resume(key === \"return\" ? \"return\" : \"next\", arg); return; } settle(result.done ? \"return\" : \"normal\", arg); }, function (err) { resume(\"throw\", err); }); } catch (err) { settle(\"throw\", err); } } function settle(type, value) { switch (type) { case \"return\": front.resolve({ value: value, done: true }); break; case \"throw\": front.reject(value); break; default: front.resolve({ value: value, done: false }); break; } front = front.next; if (front) { resume(front.key, front.arg); } else { back = null; } } this._invoke = send; if (typeof gen[\"return\"] !== \"function\") { this[\"return\"] = undefined; } }\n\nif (typeof Symbol === \"function\" && Symbol.asyncIterator) { _AsyncGenerator.prototype[Symbol.asyncIterator] = function () { return this; }; }\n\n_AsyncGenerator.prototype.next = function (arg) { return this._invoke(\"next\", arg); };\n\n_AsyncGenerator.prototype[\"throw\"] = function (arg) { return this._invoke(\"throw\", arg); };\n\n_AsyncGenerator.prototype[\"return\"] = function (arg) { return this._invoke(\"return\", arg); };\n\nfunction _AwaitValue(value) { this.wrapped = value; }\n\nfunction _asyncIterator(iterable) { var method; if (typeof Symbol !== \"undefined\") { if (Symbol.asyncIterator) { method = iterable[Symbol.asyncIterator]; if (method != null) return method.call(iterable); } if (Symbol.iterator) { method = iterable[Symbol.iterator]; if (method != null) return method.call(iterable); } } throw new TypeError(\"Object is not async iterable\"); }\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar query_partition_1 = require(\"./query-partition\");\n\nvar util_1 = require(\"./util\");\n\nvar logger_1 = require(\"./logger\");\n\nvar reference_1 = require(\"./reference\");\n\nvar path_1 = require(\"./path\");\n\nvar validate_1 = require(\"./validate\");\n\nvar types_1 = require(\"./types\");\n/**\n * A `CollectionGroup` refers to all documents that are contained in a\n * collection or subcollection with a specific collection ID.\n *\n * @class CollectionGroup\n */\n\n\nvar CollectionGroup = /*#__PURE__*/function (_reference_1$Query) {\n  _inherits(CollectionGroup, _reference_1$Query);\n\n  var _super = _createSuper(CollectionGroup);\n\n  /** @hideconstructor */\n  function CollectionGroup(firestore, collectionId, converter) {\n    _classCallCheck(this, CollectionGroup);\n\n    return _super.call(this, firestore, reference_1.QueryOptions.forCollectionGroupQuery(collectionId, converter));\n  }\n  /**\n   * Partitions a query by returning partition cursors that can be used to run\n   * the query in parallel. The returned cursors are split points that can be\n   * used as starting and end points for individual query invocations.\n   *\n   * @example\n   * const query = firestore.collectionGroup('collectionId');\n   * for await (const partition of query.getPartitions(42)) {\n   *   const partitionedQuery = partition.toQuery();\n   *   const querySnapshot = await partitionedQuery.get();\n   *   console.log(`Partition contained ${querySnapshot.length} documents`);\n   * }\n   *\n   * @param {number} desiredPartitionCount The desired maximum number of\n   * partition points. The number must be strictly positive. The actual number\n   * of partitions returned may be fewer.\n   * @return {AsyncIterable<QueryPartition>} An AsyncIterable of\n   * `QueryPartition`s.\n   */\n\n\n  _createClass(CollectionGroup, [{\n    key: \"getPartitions\",\n    value: function getPartitions(desiredPartitionCount) {\n      var _this = this;\n\n      return _wrapAsyncGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n        var _a, tag, lastValues, partitionCount, queryWithDefaultOrder, request, stream, _iteratorNormalCompletion, _didIteratorError, _iteratorError, _iterator, _step, _value, currentCursor, currentValues;\n\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                validate_1.validateInteger('desiredPartitionCount', desiredPartitionCount, {\n                  minValue: 1\n                });\n                tag = util_1.requestTag();\n                _context.next = 4;\n                return _awaitAsyncGenerator(_this.firestore.initializeIfNeeded(tag));\n\n              case 4:\n                lastValues = undefined;\n                partitionCount = 0;\n\n                if (!(desiredPartitionCount > 1)) {\n                  _context.next = 51;\n                  break;\n                }\n\n                // Partition queries require explicit ordering by __name__.\n                queryWithDefaultOrder = _this.orderBy(path_1.FieldPath.documentId());\n                request = queryWithDefaultOrder.toProto(); // Since we are always returning an extra partition (with an empty endBefore\n                // cursor), we reduce the desired partition count by one.\n\n                request.partitionCount = desiredPartitionCount - 1;\n                _context.next = 12;\n                return _awaitAsyncGenerator(_this.firestore.requestStream('partitionQueryStream', request, tag));\n\n              case 12:\n                stream = _context.sent;\n                stream.resume();\n                _iteratorNormalCompletion = true;\n                _didIteratorError = false;\n                _context.prev = 16;\n                _iterator = _asyncIterator(stream);\n\n              case 18:\n                _context.next = 20;\n                return _awaitAsyncGenerator(_iterator.next());\n\n              case 20:\n                _step = _context.sent;\n                _iteratorNormalCompletion = _step.done;\n                _context.next = 24;\n                return _awaitAsyncGenerator(_step.value);\n\n              case 24:\n                _value = _context.sent;\n\n                if (_iteratorNormalCompletion) {\n                  _context.next = 35;\n                  break;\n                }\n\n                currentCursor = _value;\n                ++partitionCount;\n                currentValues = (_a = currentCursor.values) !== null && _a !== void 0 ? _a : [];\n                _context.next = 31;\n                return new query_partition_1.QueryPartition(_this._firestore, _this._queryOptions.collectionId, _this._queryOptions.converter, lastValues, currentValues);\n\n              case 31:\n                lastValues = currentValues;\n\n              case 32:\n                _iteratorNormalCompletion = true;\n                _context.next = 18;\n                break;\n\n              case 35:\n                _context.next = 41;\n                break;\n\n              case 37:\n                _context.prev = 37;\n                _context.t0 = _context[\"catch\"](16);\n                _didIteratorError = true;\n                _iteratorError = _context.t0;\n\n              case 41:\n                _context.prev = 41;\n                _context.prev = 42;\n\n                if (!(!_iteratorNormalCompletion && _iterator[\"return\"] != null)) {\n                  _context.next = 46;\n                  break;\n                }\n\n                _context.next = 46;\n                return _awaitAsyncGenerator(_iterator[\"return\"]());\n\n              case 46:\n                _context.prev = 46;\n\n                if (!_didIteratorError) {\n                  _context.next = 49;\n                  break;\n                }\n\n                throw _iteratorError;\n\n              case 49:\n                return _context.finish(46);\n\n              case 50:\n                return _context.finish(41);\n\n              case 51:\n                logger_1.logger('Firestore.getPartitions', tag, 'Received %d partitions', partitionCount); // Return the extra partition with the empty cursor.\n\n                _context.next = 54;\n                return new query_partition_1.QueryPartition(_this._firestore, _this._queryOptions.collectionId, _this._queryOptions.converter, lastValues, undefined);\n\n              case 54:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, null, [[16, 37, 41, 51], [42,, 46, 50]]);\n      }))();\n    }\n  }, {\n    key: \"withConverter\",\n    value: function withConverter(converter) {\n      return new CollectionGroup(this.firestore, this._queryOptions.collectionId, converter !== null && converter !== void 0 ? converter : types_1.defaultConverter());\n    }\n  }]);\n\n  return CollectionGroup;\n}(reference_1.Query);\n\nexports.CollectionGroup = CollectionGroup;","map":null,"metadata":{},"sourceType":"module"}