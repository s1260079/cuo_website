{"ast":null,"code":"/**\n * Handlers methods for mouse/touch events\n */\nvar mixin = {\n  methods: {\n    handleMouseDown: function handleMouseDown(e) {\n      this.isMouseDown = true;\n\n      if (e.type.indexOf('touch') !== -1) {\n        this.dragStartX = e.touches[0].clientX;\n        this.dragStartY = e.touches[0].clientY;\n      }\n\n      if (e.type.indexOf('mouse') !== -1) {\n        this.dragStartX = e.clientX;\n        this.dragStartY = e.clientY;\n      }\n    },\n    handleMouseMove: function handleMouseMove(e) {\n      var positionX;\n      var positionY;\n\n      if (e.type.indexOf('touch') !== -1) {\n        positionX = e.touches[0].clientX;\n        positionY = e.touches[0].clientY;\n      }\n\n      if (e.type.indexOf('mouse') !== -1) {\n        positionX = e.clientX;\n        positionY = e.clientY;\n      }\n\n      var dragDistanceX = Math.abs(positionX - this.dragStartX);\n      var dragDistanceY = Math.abs(positionY - this.dragStartY);\n\n      if (dragDistanceX > 3 * dragDistanceY) {\n        this.disableScroll();\n        this.dragDistance = positionX - this.dragStartX;\n      }\n    },\n    handleMouseUp: function handleMouseUp() {\n      this.isMouseDown = false;\n      this.enableScroll();\n    },\n    handleMouseOver: function handleMouseOver(element) {\n      if (this.settings.autoplay) {\n        if (element === 'dot' && this.settings.pauseOnDotsHover || element === 'track' && this.settings.pauseOnHover) {\n          this.isAutoplayPaused = true;\n        }\n      }\n    },\n    handleMouseOut: function handleMouseOut(element) {\n      if (this.settings.autoplay) {\n        if (element === 'dot' && this.settings.pauseOnDotsHover || element === 'track' && this.settings.pauseOnHover) {\n          this.isAutoplayPaused = false;\n        }\n      }\n    }\n  }\n};\nexport default mixin;","map":null,"metadata":{},"sourceType":"module"}