{"ast":null,"code":"\"use strict\"; // Copyright 2021 Google LLC\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     https://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n//\n// ** This file is automatically generated by gapic-generator-typescript. **\n// ** https://github.com/googleapis/gapic-generator-typescript **\n// ** All changes to this file may be overwritten. **\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n/* global window */\n\nvar gax = require(\"google-gax\");\n\nvar path = require(\"path\");\n/**\n * Client JSON configuration object, loaded from\n * `src/v1beta1/firestore_client_config.json`.\n * This file defines retry strategy and timeouts for all API methods in this library.\n */\n\n\nvar gapicConfig = require(\"./firestore_client_config.json\"); // tslint:disable deprecation\n\n\nvar version = require('../../../package.json').version;\n/**\n *  The Cloud Firestore service.\n *\n *  This service exposes several types of comparable timestamps:\n *\n *  *    `create_time` - The time at which a document was created. Changes only\n *       when a document is deleted, then re-created. Increases in a strict\n *        monotonic fashion.\n *  *    `update_time` - The time at which a document was last updated. Changes\n *       every time a document is modified. Does not change when a write results\n *       in no modifications. Increases in a strict monotonic fashion.\n *  *    `read_time` - The time at which a particular state was observed. Used\n *       to denote a consistent snapshot of the database or the time at which a\n *       Document was observed to not exist.\n *  *    `commit_time` - The time at which the writes in a transaction were\n *       committed. Any read with an equal or greater `read_time` is guaranteed\n *       to see the effects of the transaction.\n * @class\n * @deprecated Use v1/firestore_client instead.\n * @memberof v1beta1\n */\n\n\nvar FirestoreClient = /*#__PURE__*/function () {\n  /**\n   * Construct an instance of FirestoreClient.\n   *\n   * @param {object} [options] - The configuration object.\n   * The options accepted by the constructor are described in detail\n   * in [this document](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#creating-the-client-instance).\n   * The common options are:\n   * @param {object} [options.credentials] - Credentials object.\n   * @param {string} [options.credentials.client_email]\n   * @param {string} [options.credentials.private_key]\n   * @param {string} [options.email] - Account email address. Required when\n   *     using a .pem or .p12 keyFilename.\n   * @param {string} [options.keyFilename] - Full path to the a .json, .pem, or\n   *     .p12 key downloaded from the Google Developers Console. If you provide\n   *     a path to a JSON file, the projectId option below is not necessary.\n   *     NOTE: .pem and .p12 require you to specify options.email as well.\n   * @param {number} [options.port] - The port on which to connect to\n   *     the remote host.\n   * @param {string} [options.projectId] - The project ID from the Google\n   *     Developer's Console, e.g. 'grape-spaceship-123'. We will also check\n   *     the environment variable GCLOUD_PROJECT for your project ID. If your\n   *     app is running in an environment which supports\n   *     {@link https://developers.google.com/identity/protocols/application-default-credentials Application Default Credentials},\n   *     your project ID will be detected automatically.\n   * @param {string} [options.apiEndpoint] - The domain name of the\n   *     API remote host.\n   * @param {gax.ClientConfig} [options.clientConfig] - Client configuration override.\n   *     Follows the structure of {@link gapicConfig}.\n   * @param {boolean} [options.fallback] - Use HTTP fallback mode.\n   *     In fallback mode, a special browser-compatible transport implementation is used\n   *     instead of gRPC transport. In browser context (if the `window` object is defined)\n   *     the fallback mode is enabled automatically; set `options.fallback` to `false`\n   *     if you need to override this behavior.\n   */\n  function FirestoreClient(opts) {\n    _classCallCheck(this, FirestoreClient);\n\n    var _a, _b;\n\n    this._terminated = false;\n    this.descriptors = {\n      page: {},\n      stream: {},\n      longrunning: {},\n      batching: {}\n    }; // Ensure that options include all the required fields.\n\n    var staticMembers = this.constructor;\n    var servicePath = (opts === null || opts === void 0 ? void 0 : opts.servicePath) || (opts === null || opts === void 0 ? void 0 : opts.apiEndpoint) || staticMembers.servicePath;\n    var port = (opts === null || opts === void 0 ? void 0 : opts.port) || staticMembers.port;\n    var clientConfig = (_a = opts === null || opts === void 0 ? void 0 : opts.clientConfig) !== null && _a !== void 0 ? _a : {};\n    var fallback = (_b = opts === null || opts === void 0 ? void 0 : opts.fallback) !== null && _b !== void 0 ? _b : typeof window !== 'undefined' && typeof (window === null || window === void 0 ? void 0 : window.fetch) === 'function';\n    opts = Object.assign({\n      servicePath: servicePath,\n      port: port,\n      clientConfig: clientConfig,\n      fallback: fallback\n    }, opts); // If scopes are unset in options and we're connecting to a non-default endpoint, set scopes just in case.\n\n    if (servicePath !== staticMembers.servicePath && !('scopes' in opts)) {\n      opts['scopes'] = staticMembers.scopes;\n    } // Choose either gRPC or proto-over-HTTP implementation of google-gax.\n\n\n    this._gaxModule = opts.fallback ? gax.fallback : gax; // Create a `gaxGrpc` object, with any grpc-specific options sent to the client.\n\n    this._gaxGrpc = new this._gaxModule.GrpcClient(opts); // Save options to use in initialize() method.\n\n    this._opts = opts; // Save the auth object to the client, for use by other methods.\n\n    this.auth = this._gaxGrpc.auth; // Set the default scopes in auth client if needed.\n\n    if (servicePath === staticMembers.servicePath) {\n      this.auth.defaultScopes = staticMembers.scopes;\n    } // Determine the client header string.\n\n\n    var clientHeader = [\"gax/\".concat(this._gaxModule.version), \"gapic/\".concat(version)];\n\n    if (typeof process !== 'undefined' && 'versions' in process) {\n      clientHeader.push(\"gl-node/\".concat(process.versions.node));\n    } else {\n      clientHeader.push(\"gl-web/\".concat(this._gaxModule.version));\n    }\n\n    if (!opts.fallback) {\n      clientHeader.push(\"grpc/\".concat(this._gaxGrpc.grpcVersion));\n    }\n\n    if (opts.libName && opts.libVersion) {\n      clientHeader.push(\"\".concat(opts.libName, \"/\").concat(opts.libVersion));\n    } // Load the applicable protos.\n    // For Node.js, pass the path to JSON proto file.\n    // For browsers, pass the JSON content.\n\n\n    var nodejsProtoPath = path.join(__dirname, '..', '..', 'protos', 'protos.json');\n    this._protos = this._gaxGrpc.loadProto(opts.fallback ? // eslint-disable-next-line @typescript-eslint/no-var-requires\n    require('../../protos/protos.json') : nodejsProtoPath); // Some of the methods on this service return \"paged\" results,\n    // (e.g. 50 results at a time, with tokens to get subsequent\n    // pages). Denote the keys used for pagination and results.\n\n    this.descriptors.page = {\n      listDocuments: new this._gaxModule.PageDescriptor('pageToken', 'nextPageToken', 'documents'),\n      listCollectionIds: new this._gaxModule.PageDescriptor('pageToken', 'nextPageToken', 'collectionIds')\n    }; // Some of the methods on this service provide streaming responses.\n    // Provide descriptors for these.\n\n    this.descriptors.stream = {\n      batchGetDocuments: new this._gaxModule.StreamDescriptor(gax.StreamType.SERVER_STREAMING),\n      runQuery: new this._gaxModule.StreamDescriptor(gax.StreamType.SERVER_STREAMING),\n      write: new this._gaxModule.StreamDescriptor(gax.StreamType.BIDI_STREAMING),\n      listen: new this._gaxModule.StreamDescriptor(gax.StreamType.BIDI_STREAMING)\n    }; // Put together the default options sent with requests.\n\n    this._defaults = this._gaxGrpc.constructSettings('google.firestore.v1beta1.Firestore', gapicConfig, opts.clientConfig || {}, {\n      'x-goog-api-client': clientHeader.join(' ')\n    }); // Set up a dictionary of \"inner API calls\"; the core implementation\n    // of calling the API is handled in `google-gax`, with this code\n    // merely providing the destination and request information.\n\n    this.innerApiCalls = {};\n  }\n  /**\n   * Initialize the client.\n   * Performs asynchronous operations (such as authentication) and prepares the client.\n   * This function will be called automatically when any class method is called for the\n   * first time, but if you need to initialize it before calling an actual method,\n   * feel free to call initialize() directly.\n   *\n   * You can await on this method if you want to make sure the client is initialized.\n   *\n   * @returns {Promise} A promise that resolves to an authenticated service stub.\n   */\n\n\n  _createClass(FirestoreClient, [{\n    key: \"initialize\",\n    value: function initialize() {\n      var _this = this;\n\n      // If the client stub promise is already initialized, return immediately.\n      if (this.firestoreStub) {\n        return this.firestoreStub;\n      } // Put together the \"service stub\" for\n      // google.firestore.v1beta1.Firestore.\n\n\n      this.firestoreStub = this._gaxGrpc.createStub(this._opts.fallback ? this._protos.lookupService('google.firestore.v1beta1.Firestore') : // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      this._protos.google.firestore.v1beta1.Firestore, this._opts); // Iterate over each of the methods that the service provides\n      // and create an API call method for each.\n\n      var firestoreStubMethods = ['getDocument', 'listDocuments', 'createDocument', 'updateDocument', 'deleteDocument', 'batchGetDocuments', 'beginTransaction', 'commit', 'rollback', 'runQuery', 'write', 'listen', 'listCollectionIds'];\n\n      var _loop = function _loop() {\n        var methodName = _firestoreStubMethods[_i];\n\n        var callPromise = _this.firestoreStub.then(function (stub) {\n          return function () {\n            if (_this._terminated) {\n              return Promise.reject('The client has already been closed.');\n            }\n\n            var func = stub[methodName];\n\n            for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n              args[_key] = arguments[_key];\n            }\n\n            return func.apply(stub, args);\n          };\n        }, function (err) {\n          return function () {\n            throw err;\n          };\n        });\n\n        var descriptor = _this.descriptors.page[methodName] || _this.descriptors.stream[methodName] || undefined;\n\n        var apiCall = _this._gaxModule.createApiCall(callPromise, _this._defaults[methodName], descriptor);\n\n        _this.innerApiCalls[methodName] = apiCall;\n      };\n\n      for (var _i = 0, _firestoreStubMethods = firestoreStubMethods; _i < _firestoreStubMethods.length; _i++) {\n        _loop();\n      }\n\n      return this.firestoreStub;\n    }\n    /**\n     * The DNS address for this API service.\n     * @returns {string} The DNS address for this service.\n     */\n\n  }, {\n    key: \"getProjectId\",\n    value:\n    /**\n     * Return the project ID used by this class.\n     * @returns {Promise} A promise that resolves to string containing the project ID.\n     */\n    function getProjectId(callback) {\n      if (callback) {\n        this.auth.getProjectId(callback);\n        return;\n      }\n\n      return this.auth.getProjectId();\n    }\n    /**\n     * Gets a single document.\n     *\n     * @param {Object} request\n     *   The request object that will be sent.\n     * @param {string} request.name\n     *   Required. The resource name of the Document to get. In the format:\n     *   `projects/{project_id}/databases/{database_id}/documents/{document_path}`.\n     * @param {google.firestore.v1beta1.DocumentMask} request.mask\n     *   The fields to return. If not set, returns all fields.\n     *\n     *   If the document has a field that is not present in this mask, that field\n     *   will not be returned in the response.\n     * @param {Buffer} request.transaction\n     *   Reads the document in a transaction.\n     * @param {google.protobuf.Timestamp} request.readTime\n     *   Reads the version of the document at the given time.\n     *   This may not be older than 60 seconds.\n     * @param {object} [options]\n     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.\n     * @returns {Promise} - The promise which resolves to an array.\n     *   The first element of the array is an object representing [Document]{@link google.firestore.v1beta1.Document}.\n     *   Please see the\n     *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods)\n     *   for more details and examples.\n     * @example\n     * const [response] = await client.getDocument(request);\n     */\n\n  }, {\n    key: \"getDocument\",\n    value: function getDocument(request, optionsOrCallback, callback) {\n      request = request || {};\n      var options;\n\n      if (typeof optionsOrCallback === 'function' && callback === undefined) {\n        callback = optionsOrCallback;\n        options = {};\n      } else {\n        options = optionsOrCallback;\n      }\n\n      options = options || {};\n      options.otherArgs = options.otherArgs || {};\n      options.otherArgs.headers = options.otherArgs.headers || {};\n      options.otherArgs.headers['x-goog-request-params'] = gax.routingHeader.fromParams({\n        name: request.name || ''\n      });\n      this.initialize();\n      return this.innerApiCalls.getDocument(request, options, callback);\n    }\n    /**\n     * Creates a new document.\n     *\n     * @param {Object} request\n     *   The request object that will be sent.\n     * @param {string} request.parent\n     *   Required. The parent resource. For example:\n     *   `projects/{project_id}/databases/{database_id}/documents` or\n     *   `projects/{project_id}/databases/{database_id}/documents/chatrooms/{chatroom_id}`\n     * @param {string} request.collectionId\n     *   Required. The collection ID, relative to `parent`, to list. For example: `chatrooms`.\n     * @param {string} request.documentId\n     *   The client-assigned document ID to use for this document.\n     *\n     *   Optional. If not specified, an ID will be assigned by the service.\n     * @param {google.firestore.v1beta1.Document} request.document\n     *   Required. The document to create. `name` must not be set.\n     * @param {google.firestore.v1beta1.DocumentMask} request.mask\n     *   The fields to return. If not set, returns all fields.\n     *\n     *   If the document has a field that is not present in this mask, that field\n     *   will not be returned in the response.\n     * @param {object} [options]\n     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.\n     * @returns {Promise} - The promise which resolves to an array.\n     *   The first element of the array is an object representing [Document]{@link google.firestore.v1beta1.Document}.\n     *   Please see the\n     *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods)\n     *   for more details and examples.\n     * @example\n     * const [response] = await client.createDocument(request);\n     */\n\n  }, {\n    key: \"createDocument\",\n    value: function createDocument(request, optionsOrCallback, callback) {\n      request = request || {};\n      var options;\n\n      if (typeof optionsOrCallback === 'function' && callback === undefined) {\n        callback = optionsOrCallback;\n        options = {};\n      } else {\n        options = optionsOrCallback;\n      }\n\n      options = options || {};\n      options.otherArgs = options.otherArgs || {};\n      options.otherArgs.headers = options.otherArgs.headers || {};\n      options.otherArgs.headers['x-goog-request-params'] = gax.routingHeader.fromParams({\n        parent: request.parent || ''\n      });\n      this.initialize();\n      return this.innerApiCalls.createDocument(request, options, callback);\n    }\n    /**\n     * Updates or inserts a document.\n     *\n     * @param {Object} request\n     *   The request object that will be sent.\n     * @param {google.firestore.v1beta1.Document} request.document\n     *   Required. The updated document.\n     *   Creates the document if it does not already exist.\n     * @param {google.firestore.v1beta1.DocumentMask} request.updateMask\n     *   The fields to update.\n     *   None of the field paths in the mask may contain a reserved name.\n     *\n     *   If the document exists on the server and has fields not referenced in the\n     *   mask, they are left unchanged.\n     *   Fields referenced in the mask, but not present in the input document, are\n     *   deleted from the document on the server.\n     * @param {google.firestore.v1beta1.DocumentMask} request.mask\n     *   The fields to return. If not set, returns all fields.\n     *\n     *   If the document has a field that is not present in this mask, that field\n     *   will not be returned in the response.\n     * @param {google.firestore.v1beta1.Precondition} request.currentDocument\n     *   An optional precondition on the document.\n     *   The request will fail if this is set and not met by the target document.\n     * @param {object} [options]\n     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.\n     * @returns {Promise} - The promise which resolves to an array.\n     *   The first element of the array is an object representing [Document]{@link google.firestore.v1beta1.Document}.\n     *   Please see the\n     *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods)\n     *   for more details and examples.\n     * @example\n     * const [response] = await client.updateDocument(request);\n     */\n\n  }, {\n    key: \"updateDocument\",\n    value: function updateDocument(request, optionsOrCallback, callback) {\n      request = request || {};\n      var options;\n\n      if (typeof optionsOrCallback === 'function' && callback === undefined) {\n        callback = optionsOrCallback;\n        options = {};\n      } else {\n        options = optionsOrCallback;\n      }\n\n      options = options || {};\n      options.otherArgs = options.otherArgs || {};\n      options.otherArgs.headers = options.otherArgs.headers || {};\n      options.otherArgs.headers['x-goog-request-params'] = gax.routingHeader.fromParams({\n        'document.name': request.document.name || ''\n      });\n      this.initialize();\n      return this.innerApiCalls.updateDocument(request, options, callback);\n    }\n    /**\n     * Deletes a document.\n     *\n     * @param {Object} request\n     *   The request object that will be sent.\n     * @param {string} request.name\n     *   Required. The resource name of the Document to delete. In the format:\n     *   `projects/{project_id}/databases/{database_id}/documents/{document_path}`.\n     * @param {google.firestore.v1beta1.Precondition} request.currentDocument\n     *   An optional precondition on the document.\n     *   The request will fail if this is set and not met by the target document.\n     * @param {object} [options]\n     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.\n     * @returns {Promise} - The promise which resolves to an array.\n     *   The first element of the array is an object representing [Empty]{@link google.protobuf.Empty}.\n     *   Please see the\n     *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods)\n     *   for more details and examples.\n     * @example\n     * const [response] = await client.deleteDocument(request);\n     */\n\n  }, {\n    key: \"deleteDocument\",\n    value: function deleteDocument(request, optionsOrCallback, callback) {\n      request = request || {};\n      var options;\n\n      if (typeof optionsOrCallback === 'function' && callback === undefined) {\n        callback = optionsOrCallback;\n        options = {};\n      } else {\n        options = optionsOrCallback;\n      }\n\n      options = options || {};\n      options.otherArgs = options.otherArgs || {};\n      options.otherArgs.headers = options.otherArgs.headers || {};\n      options.otherArgs.headers['x-goog-request-params'] = gax.routingHeader.fromParams({\n        name: request.name || ''\n      });\n      this.initialize();\n      return this.innerApiCalls.deleteDocument(request, options, callback);\n    }\n    /**\n     * Starts a new transaction.\n     *\n     * @param {Object} request\n     *   The request object that will be sent.\n     * @param {string} request.database\n     *   Required. The database name. In the format:\n     *   `projects/{project_id}/databases/{database_id}`.\n     * @param {google.firestore.v1beta1.TransactionOptions} request.options\n     *   The options for the transaction.\n     *   Defaults to a read-write transaction.\n     * @param {object} [options]\n     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.\n     * @returns {Promise} - The promise which resolves to an array.\n     *   The first element of the array is an object representing [BeginTransactionResponse]{@link google.firestore.v1beta1.BeginTransactionResponse}.\n     *   Please see the\n     *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods)\n     *   for more details and examples.\n     * @example\n     * const [response] = await client.beginTransaction(request);\n     */\n\n  }, {\n    key: \"beginTransaction\",\n    value: function beginTransaction(request, optionsOrCallback, callback) {\n      request = request || {};\n      var options;\n\n      if (typeof optionsOrCallback === 'function' && callback === undefined) {\n        callback = optionsOrCallback;\n        options = {};\n      } else {\n        options = optionsOrCallback;\n      }\n\n      options = options || {};\n      options.otherArgs = options.otherArgs || {};\n      options.otherArgs.headers = options.otherArgs.headers || {};\n      options.otherArgs.headers['x-goog-request-params'] = gax.routingHeader.fromParams({\n        database: request.database || ''\n      });\n      this.initialize();\n      return this.innerApiCalls.beginTransaction(request, options, callback);\n    }\n    /**\n     * Commits a transaction, while optionally updating documents.\n     *\n     * @param {Object} request\n     *   The request object that will be sent.\n     * @param {string} request.database\n     *   Required. The database name. In the format:\n     *   `projects/{project_id}/databases/{database_id}`.\n     * @param {number[]} request.writes\n     *   The writes to apply.\n     *\n     *   Always executed atomically and in order.\n     * @param {Buffer} request.transaction\n     *   If set, applies all writes in this transaction, and commits it.\n     * @param {object} [options]\n     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.\n     * @returns {Promise} - The promise which resolves to an array.\n     *   The first element of the array is an object representing [CommitResponse]{@link google.firestore.v1beta1.CommitResponse}.\n     *   Please see the\n     *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods)\n     *   for more details and examples.\n     * @example\n     * const [response] = await client.commit(request);\n     */\n\n  }, {\n    key: \"commit\",\n    value: function commit(request, optionsOrCallback, callback) {\n      request = request || {};\n      var options;\n\n      if (typeof optionsOrCallback === 'function' && callback === undefined) {\n        callback = optionsOrCallback;\n        options = {};\n      } else {\n        options = optionsOrCallback;\n      }\n\n      options = options || {};\n      options.otherArgs = options.otherArgs || {};\n      options.otherArgs.headers = options.otherArgs.headers || {};\n      options.otherArgs.headers['x-goog-request-params'] = gax.routingHeader.fromParams({\n        database: request.database || ''\n      });\n      this.initialize();\n      return this.innerApiCalls.commit(request, options, callback);\n    }\n    /**\n     * Rolls back a transaction.\n     *\n     * @param {Object} request\n     *   The request object that will be sent.\n     * @param {string} request.database\n     *   Required. The database name. In the format:\n     *   `projects/{project_id}/databases/{database_id}`.\n     * @param {Buffer} request.transaction\n     *   Required. The transaction to roll back.\n     * @param {object} [options]\n     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.\n     * @returns {Promise} - The promise which resolves to an array.\n     *   The first element of the array is an object representing [Empty]{@link google.protobuf.Empty}.\n     *   Please see the\n     *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods)\n     *   for more details and examples.\n     * @example\n     * const [response] = await client.rollback(request);\n     */\n\n  }, {\n    key: \"rollback\",\n    value: function rollback(request, optionsOrCallback, callback) {\n      request = request || {};\n      var options;\n\n      if (typeof optionsOrCallback === 'function' && callback === undefined) {\n        callback = optionsOrCallback;\n        options = {};\n      } else {\n        options = optionsOrCallback;\n      }\n\n      options = options || {};\n      options.otherArgs = options.otherArgs || {};\n      options.otherArgs.headers = options.otherArgs.headers || {};\n      options.otherArgs.headers['x-goog-request-params'] = gax.routingHeader.fromParams({\n        database: request.database || ''\n      });\n      this.initialize();\n      return this.innerApiCalls.rollback(request, options, callback);\n    }\n    /**\n     * Gets multiple documents.\n     *\n     * Documents returned by this method are not guaranteed to be returned in the\n     * same order that they were requested.\n     *\n     * @param {Object} request\n     *   The request object that will be sent.\n     * @param {string} request.database\n     *   Required. The database name. In the format:\n     *   `projects/{project_id}/databases/{database_id}`.\n     * @param {string[]} request.documents\n     *   The names of the documents to retrieve. In the format:\n     *   `projects/{project_id}/databases/{database_id}/documents/{document_path}`.\n     *   The request will fail if any of the document is not a child resource of the\n     *   given `database`. Duplicate names will be elided.\n     * @param {google.firestore.v1beta1.DocumentMask} request.mask\n     *   The fields to return. If not set, returns all fields.\n     *\n     *   If a document has a field that is not present in this mask, that field will\n     *   not be returned in the response.\n     * @param {Buffer} request.transaction\n     *   Reads documents in a transaction.\n     * @param {google.firestore.v1beta1.TransactionOptions} request.newTransaction\n     *   Starts a new transaction and reads the documents.\n     *   Defaults to a read-only transaction.\n     *   The new transaction ID will be returned as the first response in the\n     *   stream.\n     * @param {google.protobuf.Timestamp} request.readTime\n     *   Reads documents as they were at the given time.\n     *   This may not be older than 60 seconds.\n     * @param {object} [options]\n     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.\n     * @returns {Stream}\n     *   An object stream which emits [BatchGetDocumentsResponse]{@link google.firestore.v1beta1.BatchGetDocumentsResponse} on 'data' event.\n     *   Please see the\n     *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#server-streaming)\n     *   for more details and examples.\n     * @example\n     * const stream = client.batchGetDocuments(request);\n     * stream.on('data', (response) => { ... });\n     * stream.on('end', () => { ... });\n     */\n\n  }, {\n    key: \"batchGetDocuments\",\n    value: function batchGetDocuments(request, options) {\n      request = request || {};\n      options = options || {};\n      options.otherArgs = options.otherArgs || {};\n      options.otherArgs.headers = options.otherArgs.headers || {};\n      options.otherArgs.headers['x-goog-request-params'] = gax.routingHeader.fromParams({\n        database: request.database || ''\n      });\n      this.initialize();\n      return this.innerApiCalls.batchGetDocuments(request, options);\n    }\n    /**\n     * Runs a query.\n     *\n     * @param {Object} request\n     *   The request object that will be sent.\n     * @param {string} request.parent\n     *   Required. The parent resource name. In the format:\n     *   `projects/{project_id}/databases/{database_id}/documents` or\n     *   `projects/{project_id}/databases/{database_id}/documents/{document_path}`.\n     *   For example:\n     *   `projects/my-project/databases/my-database/documents` or\n     *   `projects/my-project/databases/my-database/documents/chatrooms/my-chatroom`\n     * @param {google.firestore.v1beta1.StructuredQuery} request.structuredQuery\n     *   A structured query.\n     * @param {Buffer} request.transaction\n     *   Reads documents in a transaction.\n     * @param {google.firestore.v1beta1.TransactionOptions} request.newTransaction\n     *   Starts a new transaction and reads the documents.\n     *   Defaults to a read-only transaction.\n     *   The new transaction ID will be returned as the first response in the\n     *   stream.\n     * @param {google.protobuf.Timestamp} request.readTime\n     *   Reads documents as they were at the given time.\n     *   This may not be older than 60 seconds.\n     * @param {object} [options]\n     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.\n     * @returns {Stream}\n     *   An object stream which emits [RunQueryResponse]{@link google.firestore.v1beta1.RunQueryResponse} on 'data' event.\n     *   Please see the\n     *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#server-streaming)\n     *   for more details and examples.\n     * @example\n     * const stream = client.runQuery(request);\n     * stream.on('data', (response) => { ... });\n     * stream.on('end', () => { ... });\n     */\n\n  }, {\n    key: \"runQuery\",\n    value: function runQuery(request, options) {\n      request = request || {};\n      options = options || {};\n      options.otherArgs = options.otherArgs || {};\n      options.otherArgs.headers = options.otherArgs.headers || {};\n      options.otherArgs.headers['x-goog-request-params'] = gax.routingHeader.fromParams({\n        parent: request.parent || ''\n      });\n      this.initialize();\n      return this.innerApiCalls.runQuery(request, options);\n    }\n    /**\n     * Streams batches of document updates and deletes, in order.\n     *\n     * @param {object} [options]\n     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.\n     * @returns {Stream}\n     *   An object stream which is both readable and writable. It accepts objects\n     *   representing [WriteRequest]{@link google.firestore.v1beta1.WriteRequest} for write() method, and\n     *   will emit objects representing [WriteResponse]{@link google.firestore.v1beta1.WriteResponse} on 'data' event asynchronously.\n     *   Please see the\n     *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#bi-directional-streaming)\n     *   for more details and examples.\n     * @example\n     * const stream = client.write();\n     * stream.on('data', (response) => { ... });\n     * stream.on('end', () => { ... });\n     * stream.write(request);\n     * stream.end();\n     */\n\n  }, {\n    key: \"write\",\n    value: function write(options) {\n      this.initialize();\n      return this.innerApiCalls.write({}, options);\n    }\n    /**\n     * Listens to changes.\n     *\n     * @param {object} [options]\n     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.\n     * @returns {Stream}\n     *   An object stream which is both readable and writable. It accepts objects\n     *   representing [ListenRequest]{@link google.firestore.v1beta1.ListenRequest} for write() method, and\n     *   will emit objects representing [ListenResponse]{@link google.firestore.v1beta1.ListenResponse} on 'data' event asynchronously.\n     *   Please see the\n     *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#bi-directional-streaming)\n     *   for more details and examples.\n     * @example\n     * const stream = client.listen();\n     * stream.on('data', (response) => { ... });\n     * stream.on('end', () => { ... });\n     * stream.write(request);\n     * stream.end();\n     */\n\n  }, {\n    key: \"listen\",\n    value: function listen(options) {\n      this.initialize();\n      return this.innerApiCalls.listen({}, options);\n    }\n    /**\n     * Lists documents.\n     *\n     * @param {Object} request\n     *   The request object that will be sent.\n     * @param {string} request.parent\n     *   Required. The parent resource name. In the format:\n     *   `projects/{project_id}/databases/{database_id}/documents` or\n     *   `projects/{project_id}/databases/{database_id}/documents/{document_path}`.\n     *   For example:\n     *   `projects/my-project/databases/my-database/documents` or\n     *   `projects/my-project/databases/my-database/documents/chatrooms/my-chatroom`\n     * @param {string} request.collectionId\n     *   Required. The collection ID, relative to `parent`, to list. For example: `chatrooms`\n     *   or `messages`.\n     * @param {number} request.pageSize\n     *   The maximum number of documents to return.\n     * @param {string} request.pageToken\n     *   The `next_page_token` value returned from a previous List request, if any.\n     * @param {string} request.orderBy\n     *   The order to sort results by. For example: `priority desc, name`.\n     * @param {google.firestore.v1beta1.DocumentMask} request.mask\n     *   The fields to return. If not set, returns all fields.\n     *\n     *   If a document has a field that is not present in this mask, that field\n     *   will not be returned in the response.\n     * @param {Buffer} request.transaction\n     *   Reads documents in a transaction.\n     * @param {google.protobuf.Timestamp} request.readTime\n     *   Reads documents as they were at the given time.\n     *   This may not be older than 60 seconds.\n     * @param {boolean} request.showMissing\n     *   If the list should show missing documents. A missing document is a\n     *   document that does not exist but has sub-documents. These documents will\n     *   be returned with a key but will not have fields, {@link google.firestore.v1beta1.Document.create_time|Document.create_time},\n     *   or {@link google.firestore.v1beta1.Document.update_time|Document.update_time} set.\n     *\n     *   Requests with `show_missing` may not specify `where` or\n     *   `order_by`.\n     * @param {object} [options]\n     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.\n     * @returns {Promise} - The promise which resolves to an array.\n     *   The first element of the array is Array of [Document]{@link google.firestore.v1beta1.Document}.\n     *   The client library will perform auto-pagination by default: it will call the API as many\n     *   times as needed and will merge results from all the pages into this array.\n     *   Note that it can affect your quota.\n     *   We recommend using `listDocumentsAsync()`\n     *   method described below for async iteration which you can stop as needed.\n     *   Please see the\n     *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination)\n     *   for more details and examples.\n     */\n\n  }, {\n    key: \"listDocuments\",\n    value: function listDocuments(request, optionsOrCallback, callback) {\n      request = request || {};\n      var options;\n\n      if (typeof optionsOrCallback === 'function' && callback === undefined) {\n        callback = optionsOrCallback;\n        options = {};\n      } else {\n        options = optionsOrCallback;\n      }\n\n      options = options || {};\n      options.otherArgs = options.otherArgs || {};\n      options.otherArgs.headers = options.otherArgs.headers || {};\n      options.otherArgs.headers['x-goog-request-params'] = gax.routingHeader.fromParams({\n        parent: request.parent || ''\n      });\n      this.initialize();\n      return this.innerApiCalls.listDocuments(request, options, callback);\n    }\n    /**\n     * Equivalent to `method.name.toCamelCase()`, but returns a NodeJS Stream object.\n     * @param {Object} request\n     *   The request object that will be sent.\n     * @param {string} request.parent\n     *   Required. The parent resource name. In the format:\n     *   `projects/{project_id}/databases/{database_id}/documents` or\n     *   `projects/{project_id}/databases/{database_id}/documents/{document_path}`.\n     *   For example:\n     *   `projects/my-project/databases/my-database/documents` or\n     *   `projects/my-project/databases/my-database/documents/chatrooms/my-chatroom`\n     * @param {string} request.collectionId\n     *   Required. The collection ID, relative to `parent`, to list. For example: `chatrooms`\n     *   or `messages`.\n     * @param {number} request.pageSize\n     *   The maximum number of documents to return.\n     * @param {string} request.pageToken\n     *   The `next_page_token` value returned from a previous List request, if any.\n     * @param {string} request.orderBy\n     *   The order to sort results by. For example: `priority desc, name`.\n     * @param {google.firestore.v1beta1.DocumentMask} request.mask\n     *   The fields to return. If not set, returns all fields.\n     *\n     *   If a document has a field that is not present in this mask, that field\n     *   will not be returned in the response.\n     * @param {Buffer} request.transaction\n     *   Reads documents in a transaction.\n     * @param {google.protobuf.Timestamp} request.readTime\n     *   Reads documents as they were at the given time.\n     *   This may not be older than 60 seconds.\n     * @param {boolean} request.showMissing\n     *   If the list should show missing documents. A missing document is a\n     *   document that does not exist but has sub-documents. These documents will\n     *   be returned with a key but will not have fields, {@link google.firestore.v1beta1.Document.create_time|Document.create_time},\n     *   or {@link google.firestore.v1beta1.Document.update_time|Document.update_time} set.\n     *\n     *   Requests with `show_missing` may not specify `where` or\n     *   `order_by`.\n     * @param {object} [options]\n     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.\n     * @returns {Stream}\n     *   An object stream which emits an object representing [Document]{@link google.firestore.v1beta1.Document} on 'data' event.\n     *   The client library will perform auto-pagination by default: it will call the API as many\n     *   times as needed. Note that it can affect your quota.\n     *   We recommend using `listDocumentsAsync()`\n     *   method described below for async iteration which you can stop as needed.\n     *   Please see the\n     *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination)\n     *   for more details and examples.\n     */\n\n  }, {\n    key: \"listDocumentsStream\",\n    value: function listDocumentsStream(request, options) {\n      request = request || {};\n      options = options || {};\n      options.otherArgs = options.otherArgs || {};\n      options.otherArgs.headers = options.otherArgs.headers || {};\n      options.otherArgs.headers['x-goog-request-params'] = gax.routingHeader.fromParams({\n        parent: request.parent || ''\n      });\n      var callSettings = new gax.CallSettings(options);\n      this.initialize();\n      return this.descriptors.page.listDocuments.createStream(this.innerApiCalls.listDocuments, request, callSettings);\n    }\n    /**\n     * Equivalent to `listDocuments`, but returns an iterable object.\n     *\n     * `for`-`await`-`of` syntax is used with the iterable to get response elements on-demand.\n     * @param {Object} request\n     *   The request object that will be sent.\n     * @param {string} request.parent\n     *   Required. The parent resource name. In the format:\n     *   `projects/{project_id}/databases/{database_id}/documents` or\n     *   `projects/{project_id}/databases/{database_id}/documents/{document_path}`.\n     *   For example:\n     *   `projects/my-project/databases/my-database/documents` or\n     *   `projects/my-project/databases/my-database/documents/chatrooms/my-chatroom`\n     * @param {string} request.collectionId\n     *   Required. The collection ID, relative to `parent`, to list. For example: `chatrooms`\n     *   or `messages`.\n     * @param {number} request.pageSize\n     *   The maximum number of documents to return.\n     * @param {string} request.pageToken\n     *   The `next_page_token` value returned from a previous List request, if any.\n     * @param {string} request.orderBy\n     *   The order to sort results by. For example: `priority desc, name`.\n     * @param {google.firestore.v1beta1.DocumentMask} request.mask\n     *   The fields to return. If not set, returns all fields.\n     *\n     *   If a document has a field that is not present in this mask, that field\n     *   will not be returned in the response.\n     * @param {Buffer} request.transaction\n     *   Reads documents in a transaction.\n     * @param {google.protobuf.Timestamp} request.readTime\n     *   Reads documents as they were at the given time.\n     *   This may not be older than 60 seconds.\n     * @param {boolean} request.showMissing\n     *   If the list should show missing documents. A missing document is a\n     *   document that does not exist but has sub-documents. These documents will\n     *   be returned with a key but will not have fields, {@link google.firestore.v1beta1.Document.create_time|Document.create_time},\n     *   or {@link google.firestore.v1beta1.Document.update_time|Document.update_time} set.\n     *\n     *   Requests with `show_missing` may not specify `where` or\n     *   `order_by`.\n     * @param {object} [options]\n     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.\n     * @returns {Object}\n     *   An iterable Object that allows [async iteration](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols).\n     *   When you iterate the returned iterable, each element will be an object representing\n     *   [Document]{@link google.firestore.v1beta1.Document}. The API will be called under the hood as needed, once per the page,\n     *   so you can stop the iteration when you don't need more results.\n     *   Please see the\n     *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination)\n     *   for more details and examples.\n     * @example\n     * const iterable = client.listDocumentsAsync(request);\n     * for await (const response of iterable) {\n     *   // process response\n     * }\n     */\n\n  }, {\n    key: \"listDocumentsAsync\",\n    value: function listDocumentsAsync(request, options) {\n      request = request || {};\n      options = options || {};\n      options.otherArgs = options.otherArgs || {};\n      options.otherArgs.headers = options.otherArgs.headers || {};\n      options.otherArgs.headers['x-goog-request-params'] = gax.routingHeader.fromParams({\n        parent: request.parent || ''\n      });\n      options = options || {};\n      var callSettings = new gax.CallSettings(options);\n      this.initialize();\n      return this.descriptors.page.listDocuments.asyncIterate(this.innerApiCalls['listDocuments'], request, callSettings);\n    }\n    /**\n     * Lists all the collection IDs underneath a document.\n     *\n     * @param {Object} request\n     *   The request object that will be sent.\n     * @param {string} request.parent\n     *   Required. The parent document. In the format:\n     *   `projects/{project_id}/databases/{database_id}/documents/{document_path}`.\n     *   For example:\n     *   `projects/my-project/databases/my-database/documents/chatrooms/my-chatroom`\n     * @param {number} request.pageSize\n     *   The maximum number of results to return.\n     * @param {string} request.pageToken\n     *   A page token. Must be a value from\n     *   {@link google.firestore.v1beta1.ListCollectionIdsResponse|ListCollectionIdsResponse}.\n     * @param {object} [options]\n     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.\n     * @returns {Promise} - The promise which resolves to an array.\n     *   The first element of the array is Array of string.\n     *   The client library will perform auto-pagination by default: it will call the API as many\n     *   times as needed and will merge results from all the pages into this array.\n     *   Note that it can affect your quota.\n     *   We recommend using `listCollectionIdsAsync()`\n     *   method described below for async iteration which you can stop as needed.\n     *   Please see the\n     *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination)\n     *   for more details and examples.\n     */\n\n  }, {\n    key: \"listCollectionIds\",\n    value: function listCollectionIds(request, optionsOrCallback, callback) {\n      request = request || {};\n      var options;\n\n      if (typeof optionsOrCallback === 'function' && callback === undefined) {\n        callback = optionsOrCallback;\n        options = {};\n      } else {\n        options = optionsOrCallback;\n      }\n\n      options = options || {};\n      options.otherArgs = options.otherArgs || {};\n      options.otherArgs.headers = options.otherArgs.headers || {};\n      options.otherArgs.headers['x-goog-request-params'] = gax.routingHeader.fromParams({\n        parent: request.parent || ''\n      });\n      this.initialize();\n      return this.innerApiCalls.listCollectionIds(request, options, callback);\n    }\n    /**\n     * Equivalent to `method.name.toCamelCase()`, but returns a NodeJS Stream object.\n     * @param {Object} request\n     *   The request object that will be sent.\n     * @param {string} request.parent\n     *   Required. The parent document. In the format:\n     *   `projects/{project_id}/databases/{database_id}/documents/{document_path}`.\n     *   For example:\n     *   `projects/my-project/databases/my-database/documents/chatrooms/my-chatroom`\n     * @param {number} request.pageSize\n     *   The maximum number of results to return.\n     * @param {string} request.pageToken\n     *   A page token. Must be a value from\n     *   {@link google.firestore.v1beta1.ListCollectionIdsResponse|ListCollectionIdsResponse}.\n     * @param {object} [options]\n     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.\n     * @returns {Stream}\n     *   An object stream which emits an object representing string on 'data' event.\n     *   The client library will perform auto-pagination by default: it will call the API as many\n     *   times as needed. Note that it can affect your quota.\n     *   We recommend using `listCollectionIdsAsync()`\n     *   method described below for async iteration which you can stop as needed.\n     *   Please see the\n     *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination)\n     *   for more details and examples.\n     */\n\n  }, {\n    key: \"listCollectionIdsStream\",\n    value: function listCollectionIdsStream(request, options) {\n      request = request || {};\n      options = options || {};\n      options.otherArgs = options.otherArgs || {};\n      options.otherArgs.headers = options.otherArgs.headers || {};\n      options.otherArgs.headers['x-goog-request-params'] = gax.routingHeader.fromParams({\n        parent: request.parent || ''\n      });\n      var callSettings = new gax.CallSettings(options);\n      this.initialize();\n      return this.descriptors.page.listCollectionIds.createStream(this.innerApiCalls.listCollectionIds, request, callSettings);\n    }\n    /**\n     * Equivalent to `listCollectionIds`, but returns an iterable object.\n     *\n     * `for`-`await`-`of` syntax is used with the iterable to get response elements on-demand.\n     * @param {Object} request\n     *   The request object that will be sent.\n     * @param {string} request.parent\n     *   Required. The parent document. In the format:\n     *   `projects/{project_id}/databases/{database_id}/documents/{document_path}`.\n     *   For example:\n     *   `projects/my-project/databases/my-database/documents/chatrooms/my-chatroom`\n     * @param {number} request.pageSize\n     *   The maximum number of results to return.\n     * @param {string} request.pageToken\n     *   A page token. Must be a value from\n     *   {@link google.firestore.v1beta1.ListCollectionIdsResponse|ListCollectionIdsResponse}.\n     * @param {object} [options]\n     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.\n     * @returns {Object}\n     *   An iterable Object that allows [async iteration](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols).\n     *   When you iterate the returned iterable, each element will be an object representing\n     *   string. The API will be called under the hood as needed, once per the page,\n     *   so you can stop the iteration when you don't need more results.\n     *   Please see the\n     *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination)\n     *   for more details and examples.\n     * @example\n     * const iterable = client.listCollectionIdsAsync(request);\n     * for await (const response of iterable) {\n     *   // process response\n     * }\n     */\n\n  }, {\n    key: \"listCollectionIdsAsync\",\n    value: function listCollectionIdsAsync(request, options) {\n      request = request || {};\n      options = options || {};\n      options.otherArgs = options.otherArgs || {};\n      options.otherArgs.headers = options.otherArgs.headers || {};\n      options.otherArgs.headers['x-goog-request-params'] = gax.routingHeader.fromParams({\n        parent: request.parent || ''\n      });\n      options = options || {};\n      var callSettings = new gax.CallSettings(options);\n      this.initialize();\n      return this.descriptors.page.listCollectionIds.asyncIterate(this.innerApiCalls['listCollectionIds'], request, callSettings);\n    }\n    /**\n     * Terminate the gRPC channel and close the client.\n     *\n     * The client will no longer be usable and all future behavior is undefined.\n     * @returns {Promise} A promise that resolves when the client is closed.\n     */\n\n  }, {\n    key: \"close\",\n    value: function close() {\n      var _this2 = this;\n\n      this.initialize();\n\n      if (!this._terminated) {\n        return this.firestoreStub.then(function (stub) {\n          _this2._terminated = true;\n          stub.close();\n        });\n      }\n\n      return Promise.resolve();\n    }\n  }], [{\n    key: \"servicePath\",\n    get: function get() {\n      return 'firestore.googleapis.com';\n    }\n    /**\n     * The DNS address for this API service - same as servicePath(),\n     * exists for compatibility reasons.\n     * @returns {string} The DNS address for this service.\n     */\n\n  }, {\n    key: \"apiEndpoint\",\n    get: function get() {\n      return 'firestore.googleapis.com';\n    }\n    /**\n     * The port for this API service.\n     * @returns {number} The default port for this service.\n     */\n\n  }, {\n    key: \"port\",\n    get: function get() {\n      return 443;\n    }\n    /**\n     * The scopes needed to make gRPC calls for every method defined\n     * in this service.\n     * @returns {string[]} List of default scopes.\n     */\n\n  }, {\n    key: \"scopes\",\n    get: function get() {\n      return ['https://www.googleapis.com/auth/cloud-platform', 'https://www.googleapis.com/auth/datastore'];\n    }\n  }]);\n\n  return FirestoreClient;\n}();\n\nexports.FirestoreClient = FirestoreClient;","map":null,"metadata":{},"sourceType":"module"}