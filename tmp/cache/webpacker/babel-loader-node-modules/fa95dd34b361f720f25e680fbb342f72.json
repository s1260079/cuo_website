{"ast":null,"code":"\"use strict\";\n/**\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.FallbackErrorDecoder = void 0;\n\nvar protobuf = require(\"protobufjs\");\n\nvar status_1 = require(\"./status\");\n\nvar FallbackErrorDecoder = /*#__PURE__*/function () {\n  function FallbackErrorDecoder() {\n    _classCallCheck(this, FallbackErrorDecoder);\n\n    // eslint-disable-next-line @typescript-eslint/no-var-requires\n    var errorProtoJson = require('../../protos/status.json');\n\n    this.root = protobuf.Root.fromJSON(errorProtoJson);\n    this.anyType = this.root.lookupType('google.protobuf.Any');\n    this.statusType = this.root.lookupType('google.rpc.Status');\n  }\n\n  _createClass(FallbackErrorDecoder, [{\n    key: \"decodeProtobufAny\",\n    value: function decodeProtobufAny(anyValue) {\n      var match = anyValue.type_url.match(/^type.googleapis.com\\/(.*)/);\n\n      if (!match) {\n        throw new Error(\"Unknown type encoded in google.protobuf.any: \".concat(anyValue.type_url));\n      }\n\n      var typeName = match[1];\n      var type = this.root.lookupType(typeName);\n\n      if (!type) {\n        throw new Error(\"Cannot lookup type \".concat(typeName));\n      }\n\n      return type.decode(anyValue.value);\n    } // Decodes gRPC-fallback error which is an instance of google.rpc.Status.\n\n  }, {\n    key: \"decodeRpcStatus\",\n    value: function decodeRpcStatus(buffer) {\n      var _this = this;\n\n      var uint8array = new Uint8Array(buffer);\n      var status = this.statusType.decode(uint8array); // google.rpc.Status contains an array of google.protobuf.Any\n      // which need a special treatment\n\n      var result = {\n        code: status.code,\n        message: status.message,\n        details: status.details.map(function (detail) {\n          return _this.decodeProtobufAny(detail);\n        })\n      };\n      return result;\n    } // Construct an Error from a StatusObject.\n    // Adapted from https://github.com/grpc/grpc-node/blob/master/packages/grpc-js/src/call.ts#L79\n\n  }, {\n    key: \"callErrorFromStatus\",\n    value: function callErrorFromStatus(status) {\n      status.message = \"\".concat(status.code, \" \").concat(status_1.Status[status.code], \": \").concat(status.message);\n      return Object.assign(new Error(status.message), status);\n    } // Decodes gRPC-fallback error which is an instance of google.rpc.Status,\n    // and puts it into the object similar to gRPC ServiceError object.\n\n  }, {\n    key: \"decodeErrorFromBuffer\",\n    value: function decodeErrorFromBuffer(buffer) {\n      return this.callErrorFromStatus(this.decodeRpcStatus(buffer));\n    }\n  }]);\n\n  return FallbackErrorDecoder;\n}();\n\nexports.FallbackErrorDecoder = FallbackErrorDecoder;","map":null,"metadata":{},"sourceType":"module"}