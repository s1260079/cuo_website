{"ast":null,"code":"\"use strict\"; // Copyright 2018 Google LLC\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//    http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\n\nfunction _createForOfIteratorHelper(o, allowArrayLike) { var it; if (typeof Symbol === \"undefined\" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e2) { throw _e2; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = o[Symbol.iterator](); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e3) { didErr = true; err = _e3; }, f: function f() { try { if (!normalCompletion && it[\"return\"] != null) it[\"return\"](); } finally { if (didErr) throw err; } } }; }\n\nfunction _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }\n\nfunction _nonIterableRest() { throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nfunction _iterableToArrayLimit(arr, i) { if (typeof Symbol === \"undefined\" || !(Symbol.iterator in Object(arr))) return; var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i[\"return\"] != null) _i[\"return\"](); } finally { if (_d) throw _e; } } return _arr; }\n\nfunction _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }\n\nfunction asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }\n\nfunction _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err); } _next(undefined); }); }; }\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.getRetryConfig = void 0;\n\nfunction getRetryConfig(_x) {\n  return _getRetryConfig.apply(this, arguments);\n}\n\nfunction _getRetryConfig() {\n  _getRetryConfig = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(err) {\n    var _a, config, retryRanges, shouldRetryFn, retryDelay, delay, backoff;\n\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            config = getConfig(err);\n\n            if (!(!err || !err.config || !config && !err.config.retry)) {\n              _context.next = 3;\n              break;\n            }\n\n            return _context.abrupt(\"return\", {\n              shouldRetry: false\n            });\n\n          case 3:\n            config = config || {};\n            config.currentRetryAttempt = config.currentRetryAttempt || 0;\n            config.retry = config.retry === undefined || config.retry === null ? 3 : config.retry;\n            config.httpMethodsToRetry = config.httpMethodsToRetry || ['GET', 'HEAD', 'PUT', 'OPTIONS', 'DELETE'];\n            config.noResponseRetries = config.noResponseRetries === undefined || config.noResponseRetries === null ? 2 : config.noResponseRetries; // If this wasn't in the list of status codes where we want\n            // to automatically retry, return.\n\n            retryRanges = [// https://en.wikipedia.org/wiki/List_of_HTTP_status_codes\n            // 1xx - Retry (Informational, request still processing)\n            // 2xx - Do not retry (Success)\n            // 3xx - Do not retry (Redirect)\n            // 4xx - Do not retry (Client errors)\n            // 429 - Retry (\"Too Many Requests\")\n            // 5xx - Retry (Server errors)\n            [100, 199], [429, 429], [500, 599]];\n            config.statusCodesToRetry = config.statusCodesToRetry || retryRanges; // Put the config back into the err\n\n            err.config.retryConfig = config; // Determine if we should retry the request\n\n            shouldRetryFn = config.shouldRetry || shouldRetryRequest;\n            _context.next = 14;\n            return shouldRetryFn(err);\n\n          case 14:\n            if (_context.sent) {\n              _context.next = 16;\n              break;\n            }\n\n            return _context.abrupt(\"return\", {\n              shouldRetry: false,\n              config: err.config\n            });\n\n          case 16:\n            // Calculate time to wait with exponential backoff.\n            // If this is the first retry, look for a configured retryDelay.\n            retryDelay = config.currentRetryAttempt ? 0 : (_a = config.retryDelay) !== null && _a !== void 0 ? _a : 100; // Formula: retryDelay + ((2^c - 1 / 2) * 1000)\n\n            delay = retryDelay + (Math.pow(2, config.currentRetryAttempt) - 1) / 2 * 1000; // We're going to retry!  Incremenent the counter.\n\n            err.config.retryConfig.currentRetryAttempt += 1; // Create a promise that invokes the retry after the backOffDelay\n\n            backoff = new Promise(function (resolve) {\n              setTimeout(resolve, delay);\n            }); // Notify the user if they added an `onRetryAttempt` handler\n\n            if (config.onRetryAttempt) {\n              config.onRetryAttempt(err);\n            } // Return the promise in which recalls Gaxios to retry the request\n\n\n            _context.next = 23;\n            return backoff;\n\n          case 23:\n            return _context.abrupt(\"return\", {\n              shouldRetry: true,\n              config: err.config\n            });\n\n          case 24:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n  return _getRetryConfig.apply(this, arguments);\n}\n\nexports.getRetryConfig = getRetryConfig;\n/**\n * Determine based on config if we should retry the request.\n * @param err The GaxiosError passed to the interceptor.\n */\n\nfunction shouldRetryRequest(err) {\n  var config = getConfig(err); // node-fetch raises an AbortError if signaled:\n  // https://github.com/bitinn/node-fetch#request-cancellation-with-abortsignal\n\n  if (err.name === 'AbortError') {\n    return false;\n  } // If there's no config, or retries are disabled, return.\n\n\n  if (!config || config.retry === 0) {\n    return false;\n  } // Check if this error has no response (ETIMEDOUT, ENOTFOUND, etc)\n\n\n  if (!err.response && (config.currentRetryAttempt || 0) >= config.noResponseRetries) {\n    return false;\n  } // Only retry with configured HttpMethods.\n\n\n  if (!err.config.method || config.httpMethodsToRetry.indexOf(err.config.method.toUpperCase()) < 0) {\n    return false;\n  } // If this wasn't in the list of status codes where we want\n  // to automatically retry, return.\n\n\n  if (err.response && err.response.status) {\n    var isInRange = false;\n\n    var _iterator = _createForOfIteratorHelper(config.statusCodesToRetry),\n        _step;\n\n    try {\n      for (_iterator.s(); !(_step = _iterator.n()).done;) {\n        var _ref3 = _step.value;\n\n        var _ref2 = _slicedToArray(_ref3, 2);\n\n        var min = _ref2[0];\n        var max = _ref2[1];\n        var status = err.response.status;\n\n        if (status >= min && status <= max) {\n          isInRange = true;\n          break;\n        }\n      }\n    } catch (err) {\n      _iterator.e(err);\n    } finally {\n      _iterator.f();\n    }\n\n    if (!isInRange) {\n      return false;\n    }\n  } // If we are out of retry attempts, return\n\n\n  config.currentRetryAttempt = config.currentRetryAttempt || 0;\n\n  if (config.currentRetryAttempt >= config.retry) {\n    return false;\n  }\n\n  return true;\n}\n/**\n * Acquire the raxConfig object from an GaxiosError if available.\n * @param err The Gaxios error with a config object.\n */\n\n\nfunction getConfig(err) {\n  if (err && err.config && err.config.retryConfig) {\n    return err.config.retryConfig;\n  }\n\n  return;\n}","map":null,"metadata":{},"sourceType":"module"}